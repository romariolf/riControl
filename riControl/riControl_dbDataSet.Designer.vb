'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("riControl_dbDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class riControl_dbDataSet
    Inherits Global.System.Data.DataSet
    
    Private tabletbCategoriaProduto As tbCategoriaProdutoDataTable
    
    Private tabletbClientes As tbClientesDataTable
    
    Private tabletbFormaPagamento As tbFormaPagamentoDataTable
    
    Private tabletbFornecedores As tbFornecedoresDataTable
    
    Private tabletbFornecedores_tbPedidos As tbFornecedores_tbPedidosDataTable
    
    Private tabletbPedidos As tbPedidosDataTable
    
    Private tabletbPedidos_tbProdutos As tbPedidos_tbProdutosDataTable
    
    Private tabletbProdutos As tbProdutosDataTable
    
    Private tabletbUnidade As tbUnidadeDataTable
    
    Private relationFK_tbFornecedores_tbPedidos_0_0 As Global.System.Data.DataRelation
    
    Private relationFK_tbFornecedores_tbPedidos_1_0 As Global.System.Data.DataRelation
    
    Private relationFK_tbPedidos_0_0 As Global.System.Data.DataRelation
    
    Private relationFK_tbPedidos_1_0 As Global.System.Data.DataRelation
    
    Private relationFK_tbPedidos_2_0 As Global.System.Data.DataRelation
    
    Private relationFK_tbPedidos_tbProdutos_0_0 As Global.System.Data.DataRelation
    
    Private relationFK_tbPedidos_tbProdutos_1_0 As Global.System.Data.DataRelation
    
    Private relationFK_tbProdutos_0_0 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tbCategoriaProduto")) Is Nothing) Then
                MyBase.Tables.Add(New tbCategoriaProdutoDataTable(ds.Tables("tbCategoriaProduto")))
            End If
            If (Not (ds.Tables("tbClientes")) Is Nothing) Then
                MyBase.Tables.Add(New tbClientesDataTable(ds.Tables("tbClientes")))
            End If
            If (Not (ds.Tables("tbFormaPagamento")) Is Nothing) Then
                MyBase.Tables.Add(New tbFormaPagamentoDataTable(ds.Tables("tbFormaPagamento")))
            End If
            If (Not (ds.Tables("tbFornecedores")) Is Nothing) Then
                MyBase.Tables.Add(New tbFornecedoresDataTable(ds.Tables("tbFornecedores")))
            End If
            If (Not (ds.Tables("tbFornecedores_tbPedidos")) Is Nothing) Then
                MyBase.Tables.Add(New tbFornecedores_tbPedidosDataTable(ds.Tables("tbFornecedores_tbPedidos")))
            End If
            If (Not (ds.Tables("tbPedidos")) Is Nothing) Then
                MyBase.Tables.Add(New tbPedidosDataTable(ds.Tables("tbPedidos")))
            End If
            If (Not (ds.Tables("tbPedidos_tbProdutos")) Is Nothing) Then
                MyBase.Tables.Add(New tbPedidos_tbProdutosDataTable(ds.Tables("tbPedidos_tbProdutos")))
            End If
            If (Not (ds.Tables("tbProdutos")) Is Nothing) Then
                MyBase.Tables.Add(New tbProdutosDataTable(ds.Tables("tbProdutos")))
            End If
            If (Not (ds.Tables("tbUnidade")) Is Nothing) Then
                MyBase.Tables.Add(New tbUnidadeDataTable(ds.Tables("tbUnidade")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbCategoriaProduto() As tbCategoriaProdutoDataTable
        Get
            Return Me.tabletbCategoriaProduto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbClientes() As tbClientesDataTable
        Get
            Return Me.tabletbClientes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbFormaPagamento() As tbFormaPagamentoDataTable
        Get
            Return Me.tabletbFormaPagamento
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbFornecedores() As tbFornecedoresDataTable
        Get
            Return Me.tabletbFornecedores
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbFornecedores_tbPedidos() As tbFornecedores_tbPedidosDataTable
        Get
            Return Me.tabletbFornecedores_tbPedidos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbPedidos() As tbPedidosDataTable
        Get
            Return Me.tabletbPedidos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbPedidos_tbProdutos() As tbPedidos_tbProdutosDataTable
        Get
            Return Me.tabletbPedidos_tbProdutos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbProdutos() As tbProdutosDataTable
        Get
            Return Me.tabletbProdutos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbUnidade() As tbUnidadeDataTable
        Get
            Return Me.tabletbUnidade
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As riControl_dbDataSet = CType(MyBase.Clone,riControl_dbDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("tbCategoriaProduto")) Is Nothing) Then
                MyBase.Tables.Add(New tbCategoriaProdutoDataTable(ds.Tables("tbCategoriaProduto")))
            End If
            If (Not (ds.Tables("tbClientes")) Is Nothing) Then
                MyBase.Tables.Add(New tbClientesDataTable(ds.Tables("tbClientes")))
            End If
            If (Not (ds.Tables("tbFormaPagamento")) Is Nothing) Then
                MyBase.Tables.Add(New tbFormaPagamentoDataTable(ds.Tables("tbFormaPagamento")))
            End If
            If (Not (ds.Tables("tbFornecedores")) Is Nothing) Then
                MyBase.Tables.Add(New tbFornecedoresDataTable(ds.Tables("tbFornecedores")))
            End If
            If (Not (ds.Tables("tbFornecedores_tbPedidos")) Is Nothing) Then
                MyBase.Tables.Add(New tbFornecedores_tbPedidosDataTable(ds.Tables("tbFornecedores_tbPedidos")))
            End If
            If (Not (ds.Tables("tbPedidos")) Is Nothing) Then
                MyBase.Tables.Add(New tbPedidosDataTable(ds.Tables("tbPedidos")))
            End If
            If (Not (ds.Tables("tbPedidos_tbProdutos")) Is Nothing) Then
                MyBase.Tables.Add(New tbPedidos_tbProdutosDataTable(ds.Tables("tbPedidos_tbProdutos")))
            End If
            If (Not (ds.Tables("tbProdutos")) Is Nothing) Then
                MyBase.Tables.Add(New tbProdutosDataTable(ds.Tables("tbProdutos")))
            End If
            If (Not (ds.Tables("tbUnidade")) Is Nothing) Then
                MyBase.Tables.Add(New tbUnidadeDataTable(ds.Tables("tbUnidade")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletbCategoriaProduto = CType(MyBase.Tables("tbCategoriaProduto"),tbCategoriaProdutoDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbCategoriaProduto) Is Nothing) Then
                Me.tabletbCategoriaProduto.InitVars
            End If
        End If
        Me.tabletbClientes = CType(MyBase.Tables("tbClientes"),tbClientesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbClientes) Is Nothing) Then
                Me.tabletbClientes.InitVars
            End If
        End If
        Me.tabletbFormaPagamento = CType(MyBase.Tables("tbFormaPagamento"),tbFormaPagamentoDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbFormaPagamento) Is Nothing) Then
                Me.tabletbFormaPagamento.InitVars
            End If
        End If
        Me.tabletbFornecedores = CType(MyBase.Tables("tbFornecedores"),tbFornecedoresDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbFornecedores) Is Nothing) Then
                Me.tabletbFornecedores.InitVars
            End If
        End If
        Me.tabletbFornecedores_tbPedidos = CType(MyBase.Tables("tbFornecedores_tbPedidos"),tbFornecedores_tbPedidosDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbFornecedores_tbPedidos) Is Nothing) Then
                Me.tabletbFornecedores_tbPedidos.InitVars
            End If
        End If
        Me.tabletbPedidos = CType(MyBase.Tables("tbPedidos"),tbPedidosDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbPedidos) Is Nothing) Then
                Me.tabletbPedidos.InitVars
            End If
        End If
        Me.tabletbPedidos_tbProdutos = CType(MyBase.Tables("tbPedidos_tbProdutos"),tbPedidos_tbProdutosDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbPedidos_tbProdutos) Is Nothing) Then
                Me.tabletbPedidos_tbProdutos.InitVars
            End If
        End If
        Me.tabletbProdutos = CType(MyBase.Tables("tbProdutos"),tbProdutosDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbProdutos) Is Nothing) Then
                Me.tabletbProdutos.InitVars
            End If
        End If
        Me.tabletbUnidade = CType(MyBase.Tables("tbUnidade"),tbUnidadeDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbUnidade) Is Nothing) Then
                Me.tabletbUnidade.InitVars
            End If
        End If
        Me.relationFK_tbFornecedores_tbPedidos_0_0 = Me.Relations("FK_tbFornecedores_tbPedidos_0_0")
        Me.relationFK_tbFornecedores_tbPedidos_1_0 = Me.Relations("FK_tbFornecedores_tbPedidos_1_0")
        Me.relationFK_tbPedidos_0_0 = Me.Relations("FK_tbPedidos_0_0")
        Me.relationFK_tbPedidos_1_0 = Me.Relations("FK_tbPedidos_1_0")
        Me.relationFK_tbPedidos_2_0 = Me.Relations("FK_tbPedidos_2_0")
        Me.relationFK_tbPedidos_tbProdutos_0_0 = Me.Relations("FK_tbPedidos_tbProdutos_0_0")
        Me.relationFK_tbPedidos_tbProdutos_1_0 = Me.Relations("FK_tbPedidos_tbProdutos_1_0")
        Me.relationFK_tbProdutos_0_0 = Me.Relations("FK_tbProdutos_0_0")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "riControl_dbDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/riControl_dbDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletbCategoriaProduto = New tbCategoriaProdutoDataTable()
        MyBase.Tables.Add(Me.tabletbCategoriaProduto)
        Me.tabletbClientes = New tbClientesDataTable()
        MyBase.Tables.Add(Me.tabletbClientes)
        Me.tabletbFormaPagamento = New tbFormaPagamentoDataTable()
        MyBase.Tables.Add(Me.tabletbFormaPagamento)
        Me.tabletbFornecedores = New tbFornecedoresDataTable()
        MyBase.Tables.Add(Me.tabletbFornecedores)
        Me.tabletbFornecedores_tbPedidos = New tbFornecedores_tbPedidosDataTable()
        MyBase.Tables.Add(Me.tabletbFornecedores_tbPedidos)
        Me.tabletbPedidos = New tbPedidosDataTable()
        MyBase.Tables.Add(Me.tabletbPedidos)
        Me.tabletbPedidos_tbProdutos = New tbPedidos_tbProdutosDataTable()
        MyBase.Tables.Add(Me.tabletbPedidos_tbProdutos)
        Me.tabletbProdutos = New tbProdutosDataTable()
        MyBase.Tables.Add(Me.tabletbProdutos)
        Me.tabletbUnidade = New tbUnidadeDataTable()
        MyBase.Tables.Add(Me.tabletbUnidade)
        Me.relationFK_tbFornecedores_tbPedidos_0_0 = New Global.System.Data.DataRelation("FK_tbFornecedores_tbPedidos_0_0", New Global.System.Data.DataColumn() {Me.tabletbPedidos.id_pedidoColumn}, New Global.System.Data.DataColumn() {Me.tabletbFornecedores_tbPedidos.tbPedidos_id_pedidoColumn}, false)
        Me.Relations.Add(Me.relationFK_tbFornecedores_tbPedidos_0_0)
        Me.relationFK_tbFornecedores_tbPedidos_1_0 = New Global.System.Data.DataRelation("FK_tbFornecedores_tbPedidos_1_0", New Global.System.Data.DataColumn() {Me.tabletbFornecedores.id_fornColumn}, New Global.System.Data.DataColumn() {Me.tabletbFornecedores_tbPedidos.tbFornecedores_id_fornColumn}, false)
        Me.Relations.Add(Me.relationFK_tbFornecedores_tbPedidos_1_0)
        Me.relationFK_tbPedidos_0_0 = New Global.System.Data.DataRelation("FK_tbPedidos_0_0", New Global.System.Data.DataColumn() {Me.tabletbUnidade.id_unidadeColumn}, New Global.System.Data.DataColumn() {Me.tabletbPedidos.tbUnidade_id_unidadeColumn}, false)
        Me.Relations.Add(Me.relationFK_tbPedidos_0_0)
        Me.relationFK_tbPedidos_1_0 = New Global.System.Data.DataRelation("FK_tbPedidos_1_0", New Global.System.Data.DataColumn() {Me.tabletbFormaPagamento.id_formPagColumn}, New Global.System.Data.DataColumn() {Me.tabletbPedidos.tbFormaPagamento_id_formPagColumn}, false)
        Me.Relations.Add(Me.relationFK_tbPedidos_1_0)
        Me.relationFK_tbPedidos_2_0 = New Global.System.Data.DataRelation("FK_tbPedidos_2_0", New Global.System.Data.DataColumn() {Me.tabletbClientes.id_cliColumn}, New Global.System.Data.DataColumn() {Me.tabletbPedidos.tbClientes_id_cliColumn}, false)
        Me.Relations.Add(Me.relationFK_tbPedidos_2_0)
        Me.relationFK_tbPedidos_tbProdutos_0_0 = New Global.System.Data.DataRelation("FK_tbPedidos_tbProdutos_0_0", New Global.System.Data.DataColumn() {Me.tabletbProdutos.id_prodColumn}, New Global.System.Data.DataColumn() {Me.tabletbPedidos_tbProdutos.tbProdutos_id_prodColumn}, false)
        Me.Relations.Add(Me.relationFK_tbPedidos_tbProdutos_0_0)
        Me.relationFK_tbPedidos_tbProdutos_1_0 = New Global.System.Data.DataRelation("FK_tbPedidos_tbProdutos_1_0", New Global.System.Data.DataColumn() {Me.tabletbPedidos.id_pedidoColumn}, New Global.System.Data.DataColumn() {Me.tabletbPedidos_tbProdutos.tbPedidos_id_pedidoColumn}, false)
        Me.Relations.Add(Me.relationFK_tbPedidos_tbProdutos_1_0)
        Me.relationFK_tbProdutos_0_0 = New Global.System.Data.DataRelation("FK_tbProdutos_0_0", New Global.System.Data.DataColumn() {Me.tabletbCategoriaProduto.id_catProdColumn}, New Global.System.Data.DataColumn() {Me.tabletbProdutos.tbCategoriaProduto_id_catProdColumn}, false)
        Me.Relations.Add(Me.relationFK_tbProdutos_0_0)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetbCategoriaProduto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetbClientes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetbFormaPagamento() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetbFornecedores() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetbFornecedores_tbPedidos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetbPedidos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetbPedidos_tbProdutos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetbProdutos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetbUnidade() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As riControl_dbDataSet = New riControl_dbDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub tbCategoriaProdutoRowChangeEventHandler(ByVal sender As Object, ByVal e As tbCategoriaProdutoRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub tbClientesRowChangeEventHandler(ByVal sender As Object, ByVal e As tbClientesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub tbFormaPagamentoRowChangeEventHandler(ByVal sender As Object, ByVal e As tbFormaPagamentoRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub tbFornecedoresRowChangeEventHandler(ByVal sender As Object, ByVal e As tbFornecedoresRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub tbFornecedores_tbPedidosRowChangeEventHandler(ByVal sender As Object, ByVal e As tbFornecedores_tbPedidosRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub tbPedidosRowChangeEventHandler(ByVal sender As Object, ByVal e As tbPedidosRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub tbPedidos_tbProdutosRowChangeEventHandler(ByVal sender As Object, ByVal e As tbPedidos_tbProdutosRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub tbProdutosRowChangeEventHandler(ByVal sender As Object, ByVal e As tbProdutosRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub tbUnidadeRowChangeEventHandler(ByVal sender As Object, ByVal e As tbUnidadeRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbCategoriaProdutoDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbCategoriaProdutoRow)
        
        Private columnid_catProd As Global.System.Data.DataColumn
        
        Private columnnome_catProd As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbCategoriaProduto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_catProdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_catProd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nome_catProdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnome_catProd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbCategoriaProdutoRow
            Get
                Return CType(Me.Rows(index),tbCategoriaProdutoRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbCategoriaProdutoRowChanging As tbCategoriaProdutoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbCategoriaProdutoRowChanged As tbCategoriaProdutoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbCategoriaProdutoRowDeleting As tbCategoriaProdutoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbCategoriaProdutoRowDeleted As tbCategoriaProdutoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtbCategoriaProdutoRow(ByVal row As tbCategoriaProdutoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtbCategoriaProdutoRow(ByVal id_catProd As Long, ByVal nome_catProd As String) As tbCategoriaProdutoRow
            Dim rowtbCategoriaProdutoRow As tbCategoriaProdutoRow = CType(Me.NewRow,tbCategoriaProdutoRow)
            Dim columnValuesArray() As Object = New Object() {id_catProd, nome_catProd}
            rowtbCategoriaProdutoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbCategoriaProdutoRow)
            Return rowtbCategoriaProdutoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid_catProd(ByVal id_catProd As Long) As tbCategoriaProdutoRow
            Return CType(Me.Rows.Find(New Object() {id_catProd}),tbCategoriaProdutoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbCategoriaProdutoDataTable = CType(MyBase.Clone,tbCategoriaProdutoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbCategoriaProdutoDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_catProd = MyBase.Columns("id_catProd")
            Me.columnnome_catProd = MyBase.Columns("nome_catProd")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_catProd = New Global.System.Data.DataColumn("id_catProd", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_catProd)
            Me.columnnome_catProd = New Global.System.Data.DataColumn("nome_catProd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_catProd)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_catProd}, true))
            Me.columnid_catProd.AllowDBNull = false
            Me.columnid_catProd.Unique = true
            Me.columnnome_catProd.AllowDBNull = false
            Me.columnnome_catProd.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtbCategoriaProdutoRow() As tbCategoriaProdutoRow
            Return CType(Me.NewRow,tbCategoriaProdutoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbCategoriaProdutoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbCategoriaProdutoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbCategoriaProdutoRowChangedEvent) Is Nothing) Then
                RaiseEvent tbCategoriaProdutoRowChanged(Me, New tbCategoriaProdutoRowChangeEvent(CType(e.Row,tbCategoriaProdutoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbCategoriaProdutoRowChangingEvent) Is Nothing) Then
                RaiseEvent tbCategoriaProdutoRowChanging(Me, New tbCategoriaProdutoRowChangeEvent(CType(e.Row,tbCategoriaProdutoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbCategoriaProdutoRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbCategoriaProdutoRowDeleted(Me, New tbCategoriaProdutoRowChangeEvent(CType(e.Row,tbCategoriaProdutoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbCategoriaProdutoRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbCategoriaProdutoRowDeleting(Me, New tbCategoriaProdutoRowChangeEvent(CType(e.Row,tbCategoriaProdutoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetbCategoriaProdutoRow(ByVal row As tbCategoriaProdutoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As riControl_dbDataSet = New riControl_dbDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbCategoriaProdutoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbClientesDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbClientesRow)
        
        Private columnid_cli As Global.System.Data.DataColumn
        
        Private columnnome_cli As Global.System.Data.DataColumn
        
        Private columntipo_cli As Global.System.Data.DataColumn
        
        Private columndoc_cli As Global.System.Data.DataColumn
        
        Private columntel_cli As Global.System.Data.DataColumn
        
        Private columncel_cli As Global.System.Data.DataColumn
        
        Private columnrua_cli As Global.System.Data.DataColumn
        
        Private columnnum_cli As Global.System.Data.DataColumn
        
        Private columnbairro_cli As Global.System.Data.DataColumn
        
        Private columncidade_cli As Global.System.Data.DataColumn
        
        Private columnuf_cli As Global.System.Data.DataColumn
        
        Private columncep_cli As Global.System.Data.DataColumn
        
        Private columnpais_cli As Global.System.Data.DataColumn
        
        Private columnobs_cli As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbClientes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nome_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnome_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tipo_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipo_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property doc_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndoc_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tel_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntel_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cel_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncel_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rua_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrua_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property num_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnum_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bairro_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbairro_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cidade_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncidade_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property uf_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuf_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cep_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncep_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property pais_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpais_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property obs_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobs_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbClientesRow
            Get
                Return CType(Me.Rows(index),tbClientesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbClientesRowChanging As tbClientesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbClientesRowChanged As tbClientesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbClientesRowDeleting As tbClientesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbClientesRowDeleted As tbClientesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtbClientesRow(ByVal row As tbClientesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtbClientesRow(ByVal id_cli As Long, ByVal nome_cli As String, ByVal tipo_cli As String, ByVal doc_cli As String, ByVal tel_cli As String, ByVal cel_cli As String, ByVal rua_cli As String, ByVal num_cli As Integer, ByVal bairro_cli As String, ByVal cidade_cli As String, ByVal uf_cli As String, ByVal cep_cli As String, ByVal pais_cli As String, ByVal obs_cli As String) As tbClientesRow
            Dim rowtbClientesRow As tbClientesRow = CType(Me.NewRow,tbClientesRow)
            Dim columnValuesArray() As Object = New Object() {id_cli, nome_cli, tipo_cli, doc_cli, tel_cli, cel_cli, rua_cli, num_cli, bairro_cli, cidade_cli, uf_cli, cep_cli, pais_cli, obs_cli}
            rowtbClientesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbClientesRow)
            Return rowtbClientesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid_cli(ByVal id_cli As Long) As tbClientesRow
            Return CType(Me.Rows.Find(New Object() {id_cli}),tbClientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbClientesDataTable = CType(MyBase.Clone,tbClientesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbClientesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_cli = MyBase.Columns("id_cli")
            Me.columnnome_cli = MyBase.Columns("nome_cli")
            Me.columntipo_cli = MyBase.Columns("tipo_cli")
            Me.columndoc_cli = MyBase.Columns("doc_cli")
            Me.columntel_cli = MyBase.Columns("tel_cli")
            Me.columncel_cli = MyBase.Columns("cel_cli")
            Me.columnrua_cli = MyBase.Columns("rua_cli")
            Me.columnnum_cli = MyBase.Columns("num_cli")
            Me.columnbairro_cli = MyBase.Columns("bairro_cli")
            Me.columncidade_cli = MyBase.Columns("cidade_cli")
            Me.columnuf_cli = MyBase.Columns("uf_cli")
            Me.columncep_cli = MyBase.Columns("cep_cli")
            Me.columnpais_cli = MyBase.Columns("pais_cli")
            Me.columnobs_cli = MyBase.Columns("obs_cli")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_cli = New Global.System.Data.DataColumn("id_cli", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_cli)
            Me.columnnome_cli = New Global.System.Data.DataColumn("nome_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_cli)
            Me.columntipo_cli = New Global.System.Data.DataColumn("tipo_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipo_cli)
            Me.columndoc_cli = New Global.System.Data.DataColumn("doc_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndoc_cli)
            Me.columntel_cli = New Global.System.Data.DataColumn("tel_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntel_cli)
            Me.columncel_cli = New Global.System.Data.DataColumn("cel_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncel_cli)
            Me.columnrua_cli = New Global.System.Data.DataColumn("rua_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrua_cli)
            Me.columnnum_cli = New Global.System.Data.DataColumn("num_cli", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnum_cli)
            Me.columnbairro_cli = New Global.System.Data.DataColumn("bairro_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbairro_cli)
            Me.columncidade_cli = New Global.System.Data.DataColumn("cidade_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncidade_cli)
            Me.columnuf_cli = New Global.System.Data.DataColumn("uf_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuf_cli)
            Me.columncep_cli = New Global.System.Data.DataColumn("cep_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncep_cli)
            Me.columnpais_cli = New Global.System.Data.DataColumn("pais_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpais_cli)
            Me.columnobs_cli = New Global.System.Data.DataColumn("obs_cli", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobs_cli)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_cli}, true))
            Me.columnid_cli.AllowDBNull = false
            Me.columnid_cli.Unique = true
            Me.columnnome_cli.AllowDBNull = false
            Me.columnnome_cli.MaxLength = 50
            Me.columntipo_cli.AllowDBNull = false
            Me.columntipo_cli.MaxLength = 20
            Me.columndoc_cli.AllowDBNull = false
            Me.columndoc_cli.MaxLength = 15
            Me.columntel_cli.MaxLength = 20
            Me.columncel_cli.AllowDBNull = false
            Me.columncel_cli.MaxLength = 20
            Me.columnrua_cli.MaxLength = 50
            Me.columnbairro_cli.MaxLength = 50
            Me.columncidade_cli.AllowDBNull = false
            Me.columncidade_cli.MaxLength = 50
            Me.columnuf_cli.AllowDBNull = false
            Me.columnuf_cli.MaxLength = 5
            Me.columncep_cli.MaxLength = 20
            Me.columnpais_cli.AllowDBNull = false
            Me.columnpais_cli.MaxLength = 50
            Me.columnobs_cli.MaxLength = 350
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtbClientesRow() As tbClientesRow
            Return CType(Me.NewRow,tbClientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbClientesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbClientesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbClientesRowChangedEvent) Is Nothing) Then
                RaiseEvent tbClientesRowChanged(Me, New tbClientesRowChangeEvent(CType(e.Row,tbClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbClientesRowChangingEvent) Is Nothing) Then
                RaiseEvent tbClientesRowChanging(Me, New tbClientesRowChangeEvent(CType(e.Row,tbClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbClientesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbClientesRowDeleted(Me, New tbClientesRowChangeEvent(CType(e.Row,tbClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbClientesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbClientesRowDeleting(Me, New tbClientesRowChangeEvent(CType(e.Row,tbClientesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetbClientesRow(ByVal row As tbClientesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As riControl_dbDataSet = New riControl_dbDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbClientesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbFormaPagamentoDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbFormaPagamentoRow)
        
        Private columnid_formPag As Global.System.Data.DataColumn
        
        Private columnnome_formPag As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbFormaPagamento"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_formPagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_formPag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nome_formPagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnome_formPag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbFormaPagamentoRow
            Get
                Return CType(Me.Rows(index),tbFormaPagamentoRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFormaPagamentoRowChanging As tbFormaPagamentoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFormaPagamentoRowChanged As tbFormaPagamentoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFormaPagamentoRowDeleting As tbFormaPagamentoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFormaPagamentoRowDeleted As tbFormaPagamentoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtbFormaPagamentoRow(ByVal row As tbFormaPagamentoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtbFormaPagamentoRow(ByVal id_formPag As Long, ByVal nome_formPag As String) As tbFormaPagamentoRow
            Dim rowtbFormaPagamentoRow As tbFormaPagamentoRow = CType(Me.NewRow,tbFormaPagamentoRow)
            Dim columnValuesArray() As Object = New Object() {id_formPag, nome_formPag}
            rowtbFormaPagamentoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbFormaPagamentoRow)
            Return rowtbFormaPagamentoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid_formPag(ByVal id_formPag As Long) As tbFormaPagamentoRow
            Return CType(Me.Rows.Find(New Object() {id_formPag}),tbFormaPagamentoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbFormaPagamentoDataTable = CType(MyBase.Clone,tbFormaPagamentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbFormaPagamentoDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_formPag = MyBase.Columns("id_formPag")
            Me.columnnome_formPag = MyBase.Columns("nome_formPag")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_formPag = New Global.System.Data.DataColumn("id_formPag", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_formPag)
            Me.columnnome_formPag = New Global.System.Data.DataColumn("nome_formPag", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_formPag)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_formPag}, true))
            Me.columnid_formPag.AllowDBNull = false
            Me.columnid_formPag.Unique = true
            Me.columnnome_formPag.AllowDBNull = false
            Me.columnnome_formPag.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtbFormaPagamentoRow() As tbFormaPagamentoRow
            Return CType(Me.NewRow,tbFormaPagamentoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbFormaPagamentoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbFormaPagamentoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbFormaPagamentoRowChangedEvent) Is Nothing) Then
                RaiseEvent tbFormaPagamentoRowChanged(Me, New tbFormaPagamentoRowChangeEvent(CType(e.Row,tbFormaPagamentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbFormaPagamentoRowChangingEvent) Is Nothing) Then
                RaiseEvent tbFormaPagamentoRowChanging(Me, New tbFormaPagamentoRowChangeEvent(CType(e.Row,tbFormaPagamentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbFormaPagamentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbFormaPagamentoRowDeleted(Me, New tbFormaPagamentoRowChangeEvent(CType(e.Row,tbFormaPagamentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbFormaPagamentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbFormaPagamentoRowDeleting(Me, New tbFormaPagamentoRowChangeEvent(CType(e.Row,tbFormaPagamentoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetbFormaPagamentoRow(ByVal row As tbFormaPagamentoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As riControl_dbDataSet = New riControl_dbDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbFormaPagamentoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbFornecedoresDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbFornecedoresRow)
        
        Private columnid_forn As Global.System.Data.DataColumn
        
        Private columnnome_forn As Global.System.Data.DataColumn
        
        Private columntipo_forn As Global.System.Data.DataColumn
        
        Private columndoc_forn As Global.System.Data.DataColumn
        
        Private columntel_forn As Global.System.Data.DataColumn
        
        Private columncel_forn As Global.System.Data.DataColumn
        
        Private columnrua_forn As Global.System.Data.DataColumn
        
        Private columnnum_forn As Global.System.Data.DataColumn
        
        Private columnbairro_forn As Global.System.Data.DataColumn
        
        Private columncidade_forn As Global.System.Data.DataColumn
        
        Private columnuf_forn As Global.System.Data.DataColumn
        
        Private columncep_forn As Global.System.Data.DataColumn
        
        Private columnpais_forn As Global.System.Data.DataColumn
        
        Private columnobs_forn As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbFornecedores"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nome_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnome_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tipo_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipo_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property doc_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndoc_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tel_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntel_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cel_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncel_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property rua_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrua_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property num_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnum_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bairro_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbairro_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cidade_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncidade_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property uf_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuf_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property cep_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncep_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property pais_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpais_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property obs_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobs_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbFornecedoresRow
            Get
                Return CType(Me.Rows(index),tbFornecedoresRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFornecedoresRowChanging As tbFornecedoresRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFornecedoresRowChanged As tbFornecedoresRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFornecedoresRowDeleting As tbFornecedoresRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFornecedoresRowDeleted As tbFornecedoresRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtbFornecedoresRow(ByVal row As tbFornecedoresRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtbFornecedoresRow(ByVal id_forn As Long, ByVal nome_forn As String, ByVal tipo_forn As String, ByVal doc_forn As String, ByVal tel_forn As String, ByVal cel_forn As String, ByVal rua_forn As String, ByVal num_forn As Long, ByVal bairro_forn As String, ByVal cidade_forn As String, ByVal uf_forn As String, ByVal cep_forn As String, ByVal pais_forn As String, ByVal obs_forn As String) As tbFornecedoresRow
            Dim rowtbFornecedoresRow As tbFornecedoresRow = CType(Me.NewRow,tbFornecedoresRow)
            Dim columnValuesArray() As Object = New Object() {id_forn, nome_forn, tipo_forn, doc_forn, tel_forn, cel_forn, rua_forn, num_forn, bairro_forn, cidade_forn, uf_forn, cep_forn, pais_forn, obs_forn}
            rowtbFornecedoresRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbFornecedoresRow)
            Return rowtbFornecedoresRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid_forn(ByVal id_forn As Long) As tbFornecedoresRow
            Return CType(Me.Rows.Find(New Object() {id_forn}),tbFornecedoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbFornecedoresDataTable = CType(MyBase.Clone,tbFornecedoresDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbFornecedoresDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_forn = MyBase.Columns("id_forn")
            Me.columnnome_forn = MyBase.Columns("nome_forn")
            Me.columntipo_forn = MyBase.Columns("tipo_forn")
            Me.columndoc_forn = MyBase.Columns("doc_forn")
            Me.columntel_forn = MyBase.Columns("tel_forn")
            Me.columncel_forn = MyBase.Columns("cel_forn")
            Me.columnrua_forn = MyBase.Columns("rua_forn")
            Me.columnnum_forn = MyBase.Columns("num_forn")
            Me.columnbairro_forn = MyBase.Columns("bairro_forn")
            Me.columncidade_forn = MyBase.Columns("cidade_forn")
            Me.columnuf_forn = MyBase.Columns("uf_forn")
            Me.columncep_forn = MyBase.Columns("cep_forn")
            Me.columnpais_forn = MyBase.Columns("pais_forn")
            Me.columnobs_forn = MyBase.Columns("obs_forn")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_forn = New Global.System.Data.DataColumn("id_forn", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_forn)
            Me.columnnome_forn = New Global.System.Data.DataColumn("nome_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_forn)
            Me.columntipo_forn = New Global.System.Data.DataColumn("tipo_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipo_forn)
            Me.columndoc_forn = New Global.System.Data.DataColumn("doc_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndoc_forn)
            Me.columntel_forn = New Global.System.Data.DataColumn("tel_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntel_forn)
            Me.columncel_forn = New Global.System.Data.DataColumn("cel_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncel_forn)
            Me.columnrua_forn = New Global.System.Data.DataColumn("rua_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrua_forn)
            Me.columnnum_forn = New Global.System.Data.DataColumn("num_forn", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnum_forn)
            Me.columnbairro_forn = New Global.System.Data.DataColumn("bairro_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbairro_forn)
            Me.columncidade_forn = New Global.System.Data.DataColumn("cidade_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncidade_forn)
            Me.columnuf_forn = New Global.System.Data.DataColumn("uf_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuf_forn)
            Me.columncep_forn = New Global.System.Data.DataColumn("cep_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncep_forn)
            Me.columnpais_forn = New Global.System.Data.DataColumn("pais_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpais_forn)
            Me.columnobs_forn = New Global.System.Data.DataColumn("obs_forn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobs_forn)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_forn}, true))
            Me.columnid_forn.AllowDBNull = false
            Me.columnid_forn.Unique = true
            Me.columnnome_forn.AllowDBNull = false
            Me.columnnome_forn.MaxLength = 50
            Me.columntipo_forn.AllowDBNull = false
            Me.columntipo_forn.MaxLength = 50
            Me.columndoc_forn.AllowDBNull = false
            Me.columndoc_forn.MaxLength = 20
            Me.columntel_forn.MaxLength = 20
            Me.columncel_forn.AllowDBNull = false
            Me.columncel_forn.MaxLength = 20
            Me.columnrua_forn.MaxLength = 50
            Me.columnbairro_forn.MaxLength = 50
            Me.columncidade_forn.AllowDBNull = false
            Me.columncidade_forn.MaxLength = 50
            Me.columnuf_forn.AllowDBNull = false
            Me.columnuf_forn.MaxLength = 5
            Me.columncep_forn.MaxLength = 20
            Me.columnpais_forn.AllowDBNull = false
            Me.columnpais_forn.MaxLength = 50
            Me.columnobs_forn.MaxLength = 350
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtbFornecedoresRow() As tbFornecedoresRow
            Return CType(Me.NewRow,tbFornecedoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbFornecedoresRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbFornecedoresRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbFornecedoresRowChangedEvent) Is Nothing) Then
                RaiseEvent tbFornecedoresRowChanged(Me, New tbFornecedoresRowChangeEvent(CType(e.Row,tbFornecedoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbFornecedoresRowChangingEvent) Is Nothing) Then
                RaiseEvent tbFornecedoresRowChanging(Me, New tbFornecedoresRowChangeEvent(CType(e.Row,tbFornecedoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbFornecedoresRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbFornecedoresRowDeleted(Me, New tbFornecedoresRowChangeEvent(CType(e.Row,tbFornecedoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbFornecedoresRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbFornecedoresRowDeleting(Me, New tbFornecedoresRowChangeEvent(CType(e.Row,tbFornecedoresRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetbFornecedoresRow(ByVal row As tbFornecedoresRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As riControl_dbDataSet = New riControl_dbDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbFornecedoresDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbFornecedores_tbPedidosDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbFornecedores_tbPedidosRow)
        
        Private columntbFornecedores_id_forn As Global.System.Data.DataColumn
        
        Private columntbPedidos_id_pedido As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbFornecedores_tbPedidos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tbFornecedores_id_fornColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntbFornecedores_id_forn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tbPedidos_id_pedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntbPedidos_id_pedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbFornecedores_tbPedidosRow
            Get
                Return CType(Me.Rows(index),tbFornecedores_tbPedidosRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFornecedores_tbPedidosRowChanging As tbFornecedores_tbPedidosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFornecedores_tbPedidosRowChanged As tbFornecedores_tbPedidosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFornecedores_tbPedidosRowDeleting As tbFornecedores_tbPedidosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbFornecedores_tbPedidosRowDeleted As tbFornecedores_tbPedidosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtbFornecedores_tbPedidosRow(ByVal row As tbFornecedores_tbPedidosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtbFornecedores_tbPedidosRow(ByVal parenttbFornecedoresRowByFK_tbFornecedores_tbPedidos_1_0 As tbFornecedoresRow, ByVal parenttbPedidosRowByFK_tbFornecedores_tbPedidos_0_0 As tbPedidosRow) As tbFornecedores_tbPedidosRow
            Dim rowtbFornecedores_tbPedidosRow As tbFornecedores_tbPedidosRow = CType(Me.NewRow,tbFornecedores_tbPedidosRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing}
            If (Not (parenttbFornecedoresRowByFK_tbFornecedores_tbPedidos_1_0) Is Nothing) Then
                columnValuesArray(0) = parenttbFornecedoresRowByFK_tbFornecedores_tbPedidos_1_0(0)
            End If
            If (Not (parenttbPedidosRowByFK_tbFornecedores_tbPedidos_0_0) Is Nothing) Then
                columnValuesArray(1) = parenttbPedidosRowByFK_tbFornecedores_tbPedidos_0_0(0)
            End If
            rowtbFornecedores_tbPedidosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbFornecedores_tbPedidosRow)
            Return rowtbFornecedores_tbPedidosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBytbFornecedores_id_forntbPedidos_id_pedido(ByVal tbFornecedores_id_forn As Long, ByVal tbPedidos_id_pedido As Long) As tbFornecedores_tbPedidosRow
            Return CType(Me.Rows.Find(New Object() {tbFornecedores_id_forn, tbPedidos_id_pedido}),tbFornecedores_tbPedidosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbFornecedores_tbPedidosDataTable = CType(MyBase.Clone,tbFornecedores_tbPedidosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbFornecedores_tbPedidosDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columntbFornecedores_id_forn = MyBase.Columns("tbFornecedores_id_forn")
            Me.columntbPedidos_id_pedido = MyBase.Columns("tbPedidos_id_pedido")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columntbFornecedores_id_forn = New Global.System.Data.DataColumn("tbFornecedores_id_forn", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntbFornecedores_id_forn)
            Me.columntbPedidos_id_pedido = New Global.System.Data.DataColumn("tbPedidos_id_pedido", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntbPedidos_id_pedido)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columntbFornecedores_id_forn, Me.columntbPedidos_id_pedido}, true))
            Me.columntbFornecedores_id_forn.AllowDBNull = false
            Me.columntbPedidos_id_pedido.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtbFornecedores_tbPedidosRow() As tbFornecedores_tbPedidosRow
            Return CType(Me.NewRow,tbFornecedores_tbPedidosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbFornecedores_tbPedidosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbFornecedores_tbPedidosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbFornecedores_tbPedidosRowChangedEvent) Is Nothing) Then
                RaiseEvent tbFornecedores_tbPedidosRowChanged(Me, New tbFornecedores_tbPedidosRowChangeEvent(CType(e.Row,tbFornecedores_tbPedidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbFornecedores_tbPedidosRowChangingEvent) Is Nothing) Then
                RaiseEvent tbFornecedores_tbPedidosRowChanging(Me, New tbFornecedores_tbPedidosRowChangeEvent(CType(e.Row,tbFornecedores_tbPedidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbFornecedores_tbPedidosRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbFornecedores_tbPedidosRowDeleted(Me, New tbFornecedores_tbPedidosRowChangeEvent(CType(e.Row,tbFornecedores_tbPedidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbFornecedores_tbPedidosRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbFornecedores_tbPedidosRowDeleting(Me, New tbFornecedores_tbPedidosRowChangeEvent(CType(e.Row,tbFornecedores_tbPedidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetbFornecedores_tbPedidosRow(ByVal row As tbFornecedores_tbPedidosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As riControl_dbDataSet = New riControl_dbDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbFornecedores_tbPedidosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbPedidosDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbPedidosRow)
        
        Private columnid_pedido As Global.System.Data.DataColumn
        
        Private columntbUnidade_id_unidade As Global.System.Data.DataColumn
        
        Private columntbFormaPagamento_id_formPag As Global.System.Data.DataColumn
        
        Private columntbClientes_id_cli As Global.System.Data.DataColumn
        
        Private columndatainicio_pedido As Global.System.Data.DataColumn
        
        Private columnstatus_pedido As Global.System.Data.DataColumn
        
        Private columnvalor_pedido As Global.System.Data.DataColumn
        
        Private columndatafechamento_pedido As Global.System.Data.DataColumn
        
        Private columnobs_pedido As Global.System.Data.DataColumn
        
        Private columnquant_pedido As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbPedidos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_pedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_pedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tbUnidade_id_unidadeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntbUnidade_id_unidade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tbFormaPagamento_id_formPagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntbFormaPagamento_id_formPag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tbClientes_id_cliColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntbClientes_id_cli
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property datainicio_pedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatainicio_pedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property status_pedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus_pedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valor_pedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalor_pedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property datafechamento_pedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatafechamento_pedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property obs_pedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobs_pedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property quant_pedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquant_pedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbPedidosRow
            Get
                Return CType(Me.Rows(index),tbPedidosRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbPedidosRowChanging As tbPedidosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbPedidosRowChanged As tbPedidosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbPedidosRowDeleting As tbPedidosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbPedidosRowDeleted As tbPedidosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtbPedidosRow(ByVal row As tbPedidosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtbPedidosRow(ByVal id_pedido As Long, ByVal parenttbUnidadeRowByFK_tbPedidos_0_0 As tbUnidadeRow, ByVal parenttbFormaPagamentoRowByFK_tbPedidos_1_0 As tbFormaPagamentoRow, ByVal parenttbClientesRowByFK_tbPedidos_2_0 As tbClientesRow, ByVal datainicio_pedido As Date, ByVal status_pedido As String, ByVal valor_pedido As Double, ByVal datafechamento_pedido As Date, ByVal obs_pedido As String, ByVal quant_pedido As Double) As tbPedidosRow
            Dim rowtbPedidosRow As tbPedidosRow = CType(Me.NewRow,tbPedidosRow)
            Dim columnValuesArray() As Object = New Object() {id_pedido, Nothing, Nothing, Nothing, datainicio_pedido, status_pedido, valor_pedido, datafechamento_pedido, obs_pedido, quant_pedido}
            If (Not (parenttbUnidadeRowByFK_tbPedidos_0_0) Is Nothing) Then
                columnValuesArray(1) = parenttbUnidadeRowByFK_tbPedidos_0_0(0)
            End If
            If (Not (parenttbFormaPagamentoRowByFK_tbPedidos_1_0) Is Nothing) Then
                columnValuesArray(2) = parenttbFormaPagamentoRowByFK_tbPedidos_1_0(0)
            End If
            If (Not (parenttbClientesRowByFK_tbPedidos_2_0) Is Nothing) Then
                columnValuesArray(3) = parenttbClientesRowByFK_tbPedidos_2_0(0)
            End If
            rowtbPedidosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbPedidosRow)
            Return rowtbPedidosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid_pedido(ByVal id_pedido As Long) As tbPedidosRow
            Return CType(Me.Rows.Find(New Object() {id_pedido}),tbPedidosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbPedidosDataTable = CType(MyBase.Clone,tbPedidosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbPedidosDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_pedido = MyBase.Columns("id_pedido")
            Me.columntbUnidade_id_unidade = MyBase.Columns("tbUnidade_id_unidade")
            Me.columntbFormaPagamento_id_formPag = MyBase.Columns("tbFormaPagamento_id_formPag")
            Me.columntbClientes_id_cli = MyBase.Columns("tbClientes_id_cli")
            Me.columndatainicio_pedido = MyBase.Columns("datainicio_pedido")
            Me.columnstatus_pedido = MyBase.Columns("status_pedido")
            Me.columnvalor_pedido = MyBase.Columns("valor_pedido")
            Me.columndatafechamento_pedido = MyBase.Columns("datafechamento_pedido")
            Me.columnobs_pedido = MyBase.Columns("obs_pedido")
            Me.columnquant_pedido = MyBase.Columns("quant_pedido")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_pedido = New Global.System.Data.DataColumn("id_pedido", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_pedido)
            Me.columntbUnidade_id_unidade = New Global.System.Data.DataColumn("tbUnidade_id_unidade", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntbUnidade_id_unidade)
            Me.columntbFormaPagamento_id_formPag = New Global.System.Data.DataColumn("tbFormaPagamento_id_formPag", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntbFormaPagamento_id_formPag)
            Me.columntbClientes_id_cli = New Global.System.Data.DataColumn("tbClientes_id_cli", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntbClientes_id_cli)
            Me.columndatainicio_pedido = New Global.System.Data.DataColumn("datainicio_pedido", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatainicio_pedido)
            Me.columnstatus_pedido = New Global.System.Data.DataColumn("status_pedido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus_pedido)
            Me.columnvalor_pedido = New Global.System.Data.DataColumn("valor_pedido", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalor_pedido)
            Me.columndatafechamento_pedido = New Global.System.Data.DataColumn("datafechamento_pedido", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatafechamento_pedido)
            Me.columnobs_pedido = New Global.System.Data.DataColumn("obs_pedido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobs_pedido)
            Me.columnquant_pedido = New Global.System.Data.DataColumn("quant_pedido", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquant_pedido)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_pedido}, true))
            Me.columnid_pedido.AllowDBNull = false
            Me.columnid_pedido.Unique = true
            Me.columntbUnidade_id_unidade.AllowDBNull = false
            Me.columntbFormaPagamento_id_formPag.AllowDBNull = false
            Me.columntbClientes_id_cli.AllowDBNull = false
            Me.columndatainicio_pedido.AllowDBNull = false
            Me.columnstatus_pedido.AllowDBNull = false
            Me.columnstatus_pedido.MaxLength = 20
            Me.columnvalor_pedido.AllowDBNull = false
            Me.columnobs_pedido.MaxLength = 350
            Me.columnquant_pedido.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtbPedidosRow() As tbPedidosRow
            Return CType(Me.NewRow,tbPedidosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbPedidosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbPedidosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbPedidosRowChangedEvent) Is Nothing) Then
                RaiseEvent tbPedidosRowChanged(Me, New tbPedidosRowChangeEvent(CType(e.Row,tbPedidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbPedidosRowChangingEvent) Is Nothing) Then
                RaiseEvent tbPedidosRowChanging(Me, New tbPedidosRowChangeEvent(CType(e.Row,tbPedidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbPedidosRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbPedidosRowDeleted(Me, New tbPedidosRowChangeEvent(CType(e.Row,tbPedidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbPedidosRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbPedidosRowDeleting(Me, New tbPedidosRowChangeEvent(CType(e.Row,tbPedidosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetbPedidosRow(ByVal row As tbPedidosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As riControl_dbDataSet = New riControl_dbDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbPedidosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbPedidos_tbProdutosDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbPedidos_tbProdutosRow)
        
        Private columntbPedidos_id_pedido As Global.System.Data.DataColumn
        
        Private columntbProdutos_id_prod As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbPedidos_tbProdutos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tbPedidos_id_pedidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntbPedidos_id_pedido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tbProdutos_id_prodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntbProdutos_id_prod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbPedidos_tbProdutosRow
            Get
                Return CType(Me.Rows(index),tbPedidos_tbProdutosRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbPedidos_tbProdutosRowChanging As tbPedidos_tbProdutosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbPedidos_tbProdutosRowChanged As tbPedidos_tbProdutosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbPedidos_tbProdutosRowDeleting As tbPedidos_tbProdutosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbPedidos_tbProdutosRowDeleted As tbPedidos_tbProdutosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtbPedidos_tbProdutosRow(ByVal row As tbPedidos_tbProdutosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtbPedidos_tbProdutosRow(ByVal parenttbPedidosRowByFK_tbPedidos_tbProdutos_1_0 As tbPedidosRow, ByVal parenttbProdutosRowByFK_tbPedidos_tbProdutos_0_0 As tbProdutosRow) As tbPedidos_tbProdutosRow
            Dim rowtbPedidos_tbProdutosRow As tbPedidos_tbProdutosRow = CType(Me.NewRow,tbPedidos_tbProdutosRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing}
            If (Not (parenttbPedidosRowByFK_tbPedidos_tbProdutos_1_0) Is Nothing) Then
                columnValuesArray(0) = parenttbPedidosRowByFK_tbPedidos_tbProdutos_1_0(0)
            End If
            If (Not (parenttbProdutosRowByFK_tbPedidos_tbProdutos_0_0) Is Nothing) Then
                columnValuesArray(1) = parenttbProdutosRowByFK_tbPedidos_tbProdutos_0_0(0)
            End If
            rowtbPedidos_tbProdutosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbPedidos_tbProdutosRow)
            Return rowtbPedidos_tbProdutosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBytbPedidos_id_pedidotbProdutos_id_prod(ByVal tbPedidos_id_pedido As Long, ByVal tbProdutos_id_prod As Long) As tbPedidos_tbProdutosRow
            Return CType(Me.Rows.Find(New Object() {tbPedidos_id_pedido, tbProdutos_id_prod}),tbPedidos_tbProdutosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbPedidos_tbProdutosDataTable = CType(MyBase.Clone,tbPedidos_tbProdutosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbPedidos_tbProdutosDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columntbPedidos_id_pedido = MyBase.Columns("tbPedidos_id_pedido")
            Me.columntbProdutos_id_prod = MyBase.Columns("tbProdutos_id_prod")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columntbPedidos_id_pedido = New Global.System.Data.DataColumn("tbPedidos_id_pedido", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntbPedidos_id_pedido)
            Me.columntbProdutos_id_prod = New Global.System.Data.DataColumn("tbProdutos_id_prod", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntbProdutos_id_prod)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columntbPedidos_id_pedido, Me.columntbProdutos_id_prod}, true))
            Me.columntbPedidos_id_pedido.AllowDBNull = false
            Me.columntbProdutos_id_prod.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtbPedidos_tbProdutosRow() As tbPedidos_tbProdutosRow
            Return CType(Me.NewRow,tbPedidos_tbProdutosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbPedidos_tbProdutosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbPedidos_tbProdutosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbPedidos_tbProdutosRowChangedEvent) Is Nothing) Then
                RaiseEvent tbPedidos_tbProdutosRowChanged(Me, New tbPedidos_tbProdutosRowChangeEvent(CType(e.Row,tbPedidos_tbProdutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbPedidos_tbProdutosRowChangingEvent) Is Nothing) Then
                RaiseEvent tbPedidos_tbProdutosRowChanging(Me, New tbPedidos_tbProdutosRowChangeEvent(CType(e.Row,tbPedidos_tbProdutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbPedidos_tbProdutosRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbPedidos_tbProdutosRowDeleted(Me, New tbPedidos_tbProdutosRowChangeEvent(CType(e.Row,tbPedidos_tbProdutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbPedidos_tbProdutosRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbPedidos_tbProdutosRowDeleting(Me, New tbPedidos_tbProdutosRowChangeEvent(CType(e.Row,tbPedidos_tbProdutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetbPedidos_tbProdutosRow(ByVal row As tbPedidos_tbProdutosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As riControl_dbDataSet = New riControl_dbDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbPedidos_tbProdutosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbProdutosDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbProdutosRow)
        
        Private columnid_prod As Global.System.Data.DataColumn
        
        Private columntbCategoriaProduto_id_catProd As Global.System.Data.DataColumn
        
        Private columnnome_prod As Global.System.Data.DataColumn
        
        Private columndescricao_prod As Global.System.Data.DataColumn
        
        Private columncusto_prod As Global.System.Data.DataColumn
        
        Private columnvalorvenda_prod As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbProdutos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_prodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_prod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tbCategoriaProduto_id_catProdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntbCategoriaProduto_id_catProd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nome_prodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnome_prod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property descricao_prodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescricao_prod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property custo_prodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncusto_prod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property valorvenda_prodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvalorvenda_prod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbProdutosRow
            Get
                Return CType(Me.Rows(index),tbProdutosRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbProdutosRowChanging As tbProdutosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbProdutosRowChanged As tbProdutosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbProdutosRowDeleting As tbProdutosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbProdutosRowDeleted As tbProdutosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtbProdutosRow(ByVal row As tbProdutosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtbProdutosRow(ByVal id_prod As Long, ByVal parenttbCategoriaProdutoRowByFK_tbProdutos_0_0 As tbCategoriaProdutoRow, ByVal nome_prod As String, ByVal descricao_prod As String, ByVal custo_prod As Double, ByVal valorvenda_prod As Double) As tbProdutosRow
            Dim rowtbProdutosRow As tbProdutosRow = CType(Me.NewRow,tbProdutosRow)
            Dim columnValuesArray() As Object = New Object() {id_prod, Nothing, nome_prod, descricao_prod, custo_prod, valorvenda_prod}
            If (Not (parenttbCategoriaProdutoRowByFK_tbProdutos_0_0) Is Nothing) Then
                columnValuesArray(1) = parenttbCategoriaProdutoRowByFK_tbProdutos_0_0(0)
            End If
            rowtbProdutosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbProdutosRow)
            Return rowtbProdutosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid_prod(ByVal id_prod As Long) As tbProdutosRow
            Return CType(Me.Rows.Find(New Object() {id_prod}),tbProdutosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbProdutosDataTable = CType(MyBase.Clone,tbProdutosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbProdutosDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_prod = MyBase.Columns("id_prod")
            Me.columntbCategoriaProduto_id_catProd = MyBase.Columns("tbCategoriaProduto_id_catProd")
            Me.columnnome_prod = MyBase.Columns("nome_prod")
            Me.columndescricao_prod = MyBase.Columns("descricao_prod")
            Me.columncusto_prod = MyBase.Columns("custo_prod")
            Me.columnvalorvenda_prod = MyBase.Columns("valorvenda_prod")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_prod = New Global.System.Data.DataColumn("id_prod", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_prod)
            Me.columntbCategoriaProduto_id_catProd = New Global.System.Data.DataColumn("tbCategoriaProduto_id_catProd", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntbCategoriaProduto_id_catProd)
            Me.columnnome_prod = New Global.System.Data.DataColumn("nome_prod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_prod)
            Me.columndescricao_prod = New Global.System.Data.DataColumn("descricao_prod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescricao_prod)
            Me.columncusto_prod = New Global.System.Data.DataColumn("custo_prod", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncusto_prod)
            Me.columnvalorvenda_prod = New Global.System.Data.DataColumn("valorvenda_prod", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvalorvenda_prod)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_prod}, true))
            Me.columnid_prod.AllowDBNull = false
            Me.columnid_prod.Unique = true
            Me.columntbCategoriaProduto_id_catProd.AllowDBNull = false
            Me.columnnome_prod.AllowDBNull = false
            Me.columnnome_prod.MaxLength = 50
            Me.columndescricao_prod.MaxLength = 150
            Me.columnvalorvenda_prod.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtbProdutosRow() As tbProdutosRow
            Return CType(Me.NewRow,tbProdutosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbProdutosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbProdutosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbProdutosRowChangedEvent) Is Nothing) Then
                RaiseEvent tbProdutosRowChanged(Me, New tbProdutosRowChangeEvent(CType(e.Row,tbProdutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbProdutosRowChangingEvent) Is Nothing) Then
                RaiseEvent tbProdutosRowChanging(Me, New tbProdutosRowChangeEvent(CType(e.Row,tbProdutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbProdutosRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbProdutosRowDeleted(Me, New tbProdutosRowChangeEvent(CType(e.Row,tbProdutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbProdutosRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbProdutosRowDeleting(Me, New tbProdutosRowChangeEvent(CType(e.Row,tbProdutosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetbProdutosRow(ByVal row As tbProdutosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As riControl_dbDataSet = New riControl_dbDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbProdutosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbUnidadeDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbUnidadeRow)
        
        Private columnid_unidade As Global.System.Data.DataColumn
        
        Private columnnome_unidade As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbUnidade"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_unidadeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_unidade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nome_unidadeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnome_unidade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbUnidadeRow
            Get
                Return CType(Me.Rows(index),tbUnidadeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbUnidadeRowChanging As tbUnidadeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbUnidadeRowChanged As tbUnidadeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbUnidadeRowDeleting As tbUnidadeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tbUnidadeRowDeleted As tbUnidadeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtbUnidadeRow(ByVal row As tbUnidadeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtbUnidadeRow(ByVal id_unidade As Long, ByVal nome_unidade As String) As tbUnidadeRow
            Dim rowtbUnidadeRow As tbUnidadeRow = CType(Me.NewRow,tbUnidadeRow)
            Dim columnValuesArray() As Object = New Object() {id_unidade, nome_unidade}
            rowtbUnidadeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbUnidadeRow)
            Return rowtbUnidadeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid_unidade(ByVal id_unidade As Long) As tbUnidadeRow
            Return CType(Me.Rows.Find(New Object() {id_unidade}),tbUnidadeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbUnidadeDataTable = CType(MyBase.Clone,tbUnidadeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbUnidadeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_unidade = MyBase.Columns("id_unidade")
            Me.columnnome_unidade = MyBase.Columns("nome_unidade")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_unidade = New Global.System.Data.DataColumn("id_unidade", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_unidade)
            Me.columnnome_unidade = New Global.System.Data.DataColumn("nome_unidade", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnome_unidade)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_unidade}, true))
            Me.columnid_unidade.AllowDBNull = false
            Me.columnid_unidade.Unique = true
            Me.columnnome_unidade.AllowDBNull = false
            Me.columnnome_unidade.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtbUnidadeRow() As tbUnidadeRow
            Return CType(Me.NewRow,tbUnidadeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbUnidadeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbUnidadeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbUnidadeRowChangedEvent) Is Nothing) Then
                RaiseEvent tbUnidadeRowChanged(Me, New tbUnidadeRowChangeEvent(CType(e.Row,tbUnidadeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbUnidadeRowChangingEvent) Is Nothing) Then
                RaiseEvent tbUnidadeRowChanging(Me, New tbUnidadeRowChangeEvent(CType(e.Row,tbUnidadeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbUnidadeRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbUnidadeRowDeleted(Me, New tbUnidadeRowChangeEvent(CType(e.Row,tbUnidadeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbUnidadeRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbUnidadeRowDeleting(Me, New tbUnidadeRowChangeEvent(CType(e.Row,tbUnidadeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetbUnidadeRow(ByVal row As tbUnidadeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As riControl_dbDataSet = New riControl_dbDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbUnidadeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbCategoriaProdutoRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbCategoriaProduto As tbCategoriaProdutoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbCategoriaProduto = CType(Me.Table,tbCategoriaProdutoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_catProd() As Long
            Get
                Return CType(Me(Me.tabletbCategoriaProduto.id_catProdColumn),Long)
            End Get
            Set
                Me(Me.tabletbCategoriaProduto.id_catProdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nome_catProd() As String
            Get
                Return CType(Me(Me.tabletbCategoriaProduto.nome_catProdColumn),String)
            End Get
            Set
                Me(Me.tabletbCategoriaProduto.nome_catProdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettbProdutosRows() As tbProdutosRow()
            If (Me.Table.ChildRelations("FK_tbProdutos_0_0") Is Nothing) Then
                Return New tbProdutosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tbProdutos_0_0")),tbProdutosRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbClientesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbClientes As tbClientesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbClientes = CType(Me.Table,tbClientesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_cli() As Long
            Get
                Return CType(Me(Me.tabletbClientes.id_cliColumn),Long)
            End Get
            Set
                Me(Me.tabletbClientes.id_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nome_cli() As String
            Get
                Return CType(Me(Me.tabletbClientes.nome_cliColumn),String)
            End Get
            Set
                Me(Me.tabletbClientes.nome_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tipo_cli() As String
            Get
                Return CType(Me(Me.tabletbClientes.tipo_cliColumn),String)
            End Get
            Set
                Me(Me.tabletbClientes.tipo_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property doc_cli() As String
            Get
                Return CType(Me(Me.tabletbClientes.doc_cliColumn),String)
            End Get
            Set
                Me(Me.tabletbClientes.doc_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tel_cli() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbClientes.tel_cliColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tel_cli' in table 'tbClientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbClientes.tel_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cel_cli() As String
            Get
                Return CType(Me(Me.tabletbClientes.cel_cliColumn),String)
            End Get
            Set
                Me(Me.tabletbClientes.cel_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rua_cli() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbClientes.rua_cliColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rua_cli' in table 'tbClientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbClientes.rua_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property num_cli() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletbClientes.num_cliColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'num_cli' in table 'tbClientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbClientes.num_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bairro_cli() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbClientes.bairro_cliColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bairro_cli' in table 'tbClientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbClientes.bairro_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cidade_cli() As String
            Get
                Return CType(Me(Me.tabletbClientes.cidade_cliColumn),String)
            End Get
            Set
                Me(Me.tabletbClientes.cidade_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property uf_cli() As String
            Get
                Return CType(Me(Me.tabletbClientes.uf_cliColumn),String)
            End Get
            Set
                Me(Me.tabletbClientes.uf_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cep_cli() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbClientes.cep_cliColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cep_cli' in table 'tbClientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbClientes.cep_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property pais_cli() As String
            Get
                Return CType(Me(Me.tabletbClientes.pais_cliColumn),String)
            End Get
            Set
                Me(Me.tabletbClientes.pais_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property obs_cli() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbClientes.obs_cliColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'obs_cli' in table 'tbClientes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbClientes.obs_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istel_cliNull() As Boolean
            Return Me.IsNull(Me.tabletbClientes.tel_cliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settel_cliNull()
            Me(Me.tabletbClientes.tel_cliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isrua_cliNull() As Boolean
            Return Me.IsNull(Me.tabletbClientes.rua_cliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setrua_cliNull()
            Me(Me.tabletbClientes.rua_cliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isnum_cliNull() As Boolean
            Return Me.IsNull(Me.tabletbClientes.num_cliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setnum_cliNull()
            Me(Me.tabletbClientes.num_cliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbairro_cliNull() As Boolean
            Return Me.IsNull(Me.tabletbClientes.bairro_cliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbairro_cliNull()
            Me(Me.tabletbClientes.bairro_cliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscep_cliNull() As Boolean
            Return Me.IsNull(Me.tabletbClientes.cep_cliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcep_cliNull()
            Me(Me.tabletbClientes.cep_cliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isobs_cliNull() As Boolean
            Return Me.IsNull(Me.tabletbClientes.obs_cliColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setobs_cliNull()
            Me(Me.tabletbClientes.obs_cliColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettbPedidosRows() As tbPedidosRow()
            If (Me.Table.ChildRelations("FK_tbPedidos_2_0") Is Nothing) Then
                Return New tbPedidosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tbPedidos_2_0")),tbPedidosRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbFormaPagamentoRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbFormaPagamento As tbFormaPagamentoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbFormaPagamento = CType(Me.Table,tbFormaPagamentoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_formPag() As Long
            Get
                Return CType(Me(Me.tabletbFormaPagamento.id_formPagColumn),Long)
            End Get
            Set
                Me(Me.tabletbFormaPagamento.id_formPagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nome_formPag() As String
            Get
                Return CType(Me(Me.tabletbFormaPagamento.nome_formPagColumn),String)
            End Get
            Set
                Me(Me.tabletbFormaPagamento.nome_formPagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettbPedidosRows() As tbPedidosRow()
            If (Me.Table.ChildRelations("FK_tbPedidos_1_0") Is Nothing) Then
                Return New tbPedidosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tbPedidos_1_0")),tbPedidosRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbFornecedoresRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbFornecedores As tbFornecedoresDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbFornecedores = CType(Me.Table,tbFornecedoresDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_forn() As Long
            Get
                Return CType(Me(Me.tabletbFornecedores.id_fornColumn),Long)
            End Get
            Set
                Me(Me.tabletbFornecedores.id_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nome_forn() As String
            Get
                Return CType(Me(Me.tabletbFornecedores.nome_fornColumn),String)
            End Get
            Set
                Me(Me.tabletbFornecedores.nome_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tipo_forn() As String
            Get
                Return CType(Me(Me.tabletbFornecedores.tipo_fornColumn),String)
            End Get
            Set
                Me(Me.tabletbFornecedores.tipo_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property doc_forn() As String
            Get
                Return CType(Me(Me.tabletbFornecedores.doc_fornColumn),String)
            End Get
            Set
                Me(Me.tabletbFornecedores.doc_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tel_forn() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbFornecedores.tel_fornColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tel_forn' in table 'tbFornecedores' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbFornecedores.tel_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cel_forn() As String
            Get
                Return CType(Me(Me.tabletbFornecedores.cel_fornColumn),String)
            End Get
            Set
                Me(Me.tabletbFornecedores.cel_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rua_forn() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbFornecedores.rua_fornColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rua_forn' in table 'tbFornecedores' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbFornecedores.rua_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property num_forn() As Long
            Get
                Try 
                    Return CType(Me(Me.tabletbFornecedores.num_fornColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'num_forn' in table 'tbFornecedores' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbFornecedores.num_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bairro_forn() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbFornecedores.bairro_fornColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bairro_forn' in table 'tbFornecedores' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbFornecedores.bairro_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cidade_forn() As String
            Get
                Return CType(Me(Me.tabletbFornecedores.cidade_fornColumn),String)
            End Get
            Set
                Me(Me.tabletbFornecedores.cidade_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property uf_forn() As String
            Get
                Return CType(Me(Me.tabletbFornecedores.uf_fornColumn),String)
            End Get
            Set
                Me(Me.tabletbFornecedores.uf_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cep_forn() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbFornecedores.cep_fornColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cep_forn' in table 'tbFornecedores' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbFornecedores.cep_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property pais_forn() As String
            Get
                Return CType(Me(Me.tabletbFornecedores.pais_fornColumn),String)
            End Get
            Set
                Me(Me.tabletbFornecedores.pais_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property obs_forn() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbFornecedores.obs_fornColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'obs_forn' in table 'tbFornecedores' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbFornecedores.obs_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Istel_fornNull() As Boolean
            Return Me.IsNull(Me.tabletbFornecedores.tel_fornColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Settel_fornNull()
            Me(Me.tabletbFornecedores.tel_fornColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isrua_fornNull() As Boolean
            Return Me.IsNull(Me.tabletbFornecedores.rua_fornColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setrua_fornNull()
            Me(Me.tabletbFornecedores.rua_fornColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isnum_fornNull() As Boolean
            Return Me.IsNull(Me.tabletbFornecedores.num_fornColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setnum_fornNull()
            Me(Me.tabletbFornecedores.num_fornColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbairro_fornNull() As Boolean
            Return Me.IsNull(Me.tabletbFornecedores.bairro_fornColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbairro_fornNull()
            Me(Me.tabletbFornecedores.bairro_fornColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscep_fornNull() As Boolean
            Return Me.IsNull(Me.tabletbFornecedores.cep_fornColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcep_fornNull()
            Me(Me.tabletbFornecedores.cep_fornColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isobs_fornNull() As Boolean
            Return Me.IsNull(Me.tabletbFornecedores.obs_fornColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setobs_fornNull()
            Me(Me.tabletbFornecedores.obs_fornColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettbFornecedores_tbPedidosRows() As tbFornecedores_tbPedidosRow()
            If (Me.Table.ChildRelations("FK_tbFornecedores_tbPedidos_1_0") Is Nothing) Then
                Return New tbFornecedores_tbPedidosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tbFornecedores_tbPedidos_1_0")),tbFornecedores_tbPedidosRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbFornecedores_tbPedidosRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbFornecedores_tbPedidos As tbFornecedores_tbPedidosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbFornecedores_tbPedidos = CType(Me.Table,tbFornecedores_tbPedidosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbFornecedores_id_forn() As Long
            Get
                Return CType(Me(Me.tabletbFornecedores_tbPedidos.tbFornecedores_id_fornColumn),Long)
            End Get
            Set
                Me(Me.tabletbFornecedores_tbPedidos.tbFornecedores_id_fornColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbPedidos_id_pedido() As Long
            Get
                Return CType(Me(Me.tabletbFornecedores_tbPedidos.tbPedidos_id_pedidoColumn),Long)
            End Get
            Set
                Me(Me.tabletbFornecedores_tbPedidos.tbPedidos_id_pedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbPedidosRow() As tbPedidosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tbFornecedores_tbPedidos_0_0")),tbPedidosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tbFornecedores_tbPedidos_0_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbFornecedoresRow() As tbFornecedoresRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tbFornecedores_tbPedidos_1_0")),tbFornecedoresRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tbFornecedores_tbPedidos_1_0"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbPedidosRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbPedidos As tbPedidosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbPedidos = CType(Me.Table,tbPedidosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_pedido() As Long
            Get
                Return CType(Me(Me.tabletbPedidos.id_pedidoColumn),Long)
            End Get
            Set
                Me(Me.tabletbPedidos.id_pedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbUnidade_id_unidade() As Long
            Get
                Return CType(Me(Me.tabletbPedidos.tbUnidade_id_unidadeColumn),Long)
            End Get
            Set
                Me(Me.tabletbPedidos.tbUnidade_id_unidadeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbFormaPagamento_id_formPag() As Long
            Get
                Return CType(Me(Me.tabletbPedidos.tbFormaPagamento_id_formPagColumn),Long)
            End Get
            Set
                Me(Me.tabletbPedidos.tbFormaPagamento_id_formPagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbClientes_id_cli() As Long
            Get
                Return CType(Me(Me.tabletbPedidos.tbClientes_id_cliColumn),Long)
            End Get
            Set
                Me(Me.tabletbPedidos.tbClientes_id_cliColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property datainicio_pedido() As Date
            Get
                Return CType(Me(Me.tabletbPedidos.datainicio_pedidoColumn),Date)
            End Get
            Set
                Me(Me.tabletbPedidos.datainicio_pedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property status_pedido() As String
            Get
                Return CType(Me(Me.tabletbPedidos.status_pedidoColumn),String)
            End Get
            Set
                Me(Me.tabletbPedidos.status_pedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valor_pedido() As Double
            Get
                Return CType(Me(Me.tabletbPedidos.valor_pedidoColumn),Double)
            End Get
            Set
                Me(Me.tabletbPedidos.valor_pedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property datafechamento_pedido() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbPedidos.datafechamento_pedidoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'datafechamento_pedido' in table 'tbPedidos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbPedidos.datafechamento_pedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property obs_pedido() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbPedidos.obs_pedidoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'obs_pedido' in table 'tbPedidos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbPedidos.obs_pedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property quant_pedido() As Double
            Get
                Return CType(Me(Me.tabletbPedidos.quant_pedidoColumn),Double)
            End Get
            Set
                Me(Me.tabletbPedidos.quant_pedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbUnidadeRow() As tbUnidadeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tbPedidos_0_0")),tbUnidadeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tbPedidos_0_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbFormaPagamentoRow() As tbFormaPagamentoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tbPedidos_1_0")),tbFormaPagamentoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tbPedidos_1_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbClientesRow() As tbClientesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tbPedidos_2_0")),tbClientesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tbPedidos_2_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isdatafechamento_pedidoNull() As Boolean
            Return Me.IsNull(Me.tabletbPedidos.datafechamento_pedidoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setdatafechamento_pedidoNull()
            Me(Me.tabletbPedidos.datafechamento_pedidoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isobs_pedidoNull() As Boolean
            Return Me.IsNull(Me.tabletbPedidos.obs_pedidoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setobs_pedidoNull()
            Me(Me.tabletbPedidos.obs_pedidoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettbFornecedores_tbPedidosRows() As tbFornecedores_tbPedidosRow()
            If (Me.Table.ChildRelations("FK_tbFornecedores_tbPedidos_0_0") Is Nothing) Then
                Return New tbFornecedores_tbPedidosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tbFornecedores_tbPedidos_0_0")),tbFornecedores_tbPedidosRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettbPedidos_tbProdutosRows() As tbPedidos_tbProdutosRow()
            If (Me.Table.ChildRelations("FK_tbPedidos_tbProdutos_1_0") Is Nothing) Then
                Return New tbPedidos_tbProdutosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tbPedidos_tbProdutos_1_0")),tbPedidos_tbProdutosRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbPedidos_tbProdutosRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbPedidos_tbProdutos As tbPedidos_tbProdutosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbPedidos_tbProdutos = CType(Me.Table,tbPedidos_tbProdutosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbPedidos_id_pedido() As Long
            Get
                Return CType(Me(Me.tabletbPedidos_tbProdutos.tbPedidos_id_pedidoColumn),Long)
            End Get
            Set
                Me(Me.tabletbPedidos_tbProdutos.tbPedidos_id_pedidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbProdutos_id_prod() As Long
            Get
                Return CType(Me(Me.tabletbPedidos_tbProdutos.tbProdutos_id_prodColumn),Long)
            End Get
            Set
                Me(Me.tabletbPedidos_tbProdutos.tbProdutos_id_prodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbProdutosRow() As tbProdutosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tbPedidos_tbProdutos_0_0")),tbProdutosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tbPedidos_tbProdutos_0_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbPedidosRow() As tbPedidosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tbPedidos_tbProdutos_1_0")),tbPedidosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tbPedidos_tbProdutos_1_0"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbProdutosRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbProdutos As tbProdutosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbProdutos = CType(Me.Table,tbProdutosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_prod() As Long
            Get
                Return CType(Me(Me.tabletbProdutos.id_prodColumn),Long)
            End Get
            Set
                Me(Me.tabletbProdutos.id_prodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbCategoriaProduto_id_catProd() As Long
            Get
                Return CType(Me(Me.tabletbProdutos.tbCategoriaProduto_id_catProdColumn),Long)
            End Get
            Set
                Me(Me.tabletbProdutos.tbCategoriaProduto_id_catProdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nome_prod() As String
            Get
                Return CType(Me(Me.tabletbProdutos.nome_prodColumn),String)
            End Get
            Set
                Me(Me.tabletbProdutos.nome_prodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property descricao_prod() As String
            Get
                Try 
                    Return CType(Me(Me.tabletbProdutos.descricao_prodColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'descricao_prod' in table 'tbProdutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbProdutos.descricao_prodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property custo_prod() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbProdutos.custo_prodColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'custo_prod' in table 'tbProdutos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbProdutos.custo_prodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property valorvenda_prod() As Double
            Get
                Return CType(Me(Me.tabletbProdutos.valorvenda_prodColumn),Double)
            End Get
            Set
                Me(Me.tabletbProdutos.valorvenda_prodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tbCategoriaProdutoRow() As tbCategoriaProdutoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_tbProdutos_0_0")),tbCategoriaProdutoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_tbProdutos_0_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isdescricao_prodNull() As Boolean
            Return Me.IsNull(Me.tabletbProdutos.descricao_prodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setdescricao_prodNull()
            Me(Me.tabletbProdutos.descricao_prodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Iscusto_prodNull() As Boolean
            Return Me.IsNull(Me.tabletbProdutos.custo_prodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setcusto_prodNull()
            Me(Me.tabletbProdutos.custo_prodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettbPedidos_tbProdutosRows() As tbPedidos_tbProdutosRow()
            If (Me.Table.ChildRelations("FK_tbPedidos_tbProdutos_0_0") Is Nothing) Then
                Return New tbPedidos_tbProdutosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tbPedidos_tbProdutos_0_0")),tbPedidos_tbProdutosRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tbUnidadeRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbUnidade As tbUnidadeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbUnidade = CType(Me.Table,tbUnidadeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_unidade() As Long
            Get
                Return CType(Me(Me.tabletbUnidade.id_unidadeColumn),Long)
            End Get
            Set
                Me(Me.tabletbUnidade.id_unidadeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property nome_unidade() As String
            Get
                Return CType(Me(Me.tabletbUnidade.nome_unidadeColumn),String)
            End Get
            Set
                Me(Me.tabletbUnidade.nome_unidadeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettbPedidosRows() As tbPedidosRow()
            If (Me.Table.ChildRelations("FK_tbPedidos_0_0") Is Nothing) Then
                Return New tbPedidosRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_tbPedidos_0_0")),tbPedidosRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class tbCategoriaProdutoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbCategoriaProdutoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As tbCategoriaProdutoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As tbCategoriaProdutoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class tbClientesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbClientesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As tbClientesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As tbClientesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class tbFormaPagamentoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbFormaPagamentoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As tbFormaPagamentoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As tbFormaPagamentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class tbFornecedoresRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbFornecedoresRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As tbFornecedoresRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As tbFornecedoresRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class tbFornecedores_tbPedidosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbFornecedores_tbPedidosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As tbFornecedores_tbPedidosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As tbFornecedores_tbPedidosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class tbPedidosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbPedidosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As tbPedidosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As tbPedidosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class tbPedidos_tbProdutosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbPedidos_tbProdutosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As tbPedidos_tbProdutosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As tbPedidos_tbProdutosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class tbProdutosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbProdutosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As tbProdutosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As tbProdutosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class tbUnidadeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbUnidadeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As tbUnidadeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As tbUnidadeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace riControl_dbDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbCategoriaProdutoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbCategoriaProduto"
            tableMapping.ColumnMappings.Add("id_catProd", "id_catProd")
            tableMapping.ColumnMappings.Add("nome_catProd", "nome_catProd")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[tbCategoriaProduto] WHERE (([id_catPr"& _ 
                "od] = @Original_id_catProd) AND ([nome_catProd] = @Original_nome_catProd))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_catProd"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_catProd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_catProd"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_catProd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[tbCategoriaProduto] ([id_catProd], [n"& _ 
                "ome_catProd]) VALUES (@id_catProd, @nome_catProd)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_catProd"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_catProd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_catProd"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_catProd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[tbCategoriaProduto] SET [id_catProd] = @id"& _ 
                "_catProd, [nome_catProd] = @nome_catProd WHERE (([id_catProd] = @Original_id_cat"& _ 
                "Prod) AND ([nome_catProd] = @Original_nome_catProd))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_catProd"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_catProd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_catProd"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_catProd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_catProd"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_catProd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_catProd"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_catProd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.riControl.My.MySettings.Default.riControl_dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id_catProd], [nome_catProd] FROM [tbCategoriaProduto]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As riControl_dbDataSet.tbCategoriaProdutoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As riControl_dbDataSet.tbCategoriaProdutoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As riControl_dbDataSet.tbCategoriaProdutoDataTable = New riControl_dbDataSet.tbCategoriaProdutoDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As riControl_dbDataSet.tbCategoriaProdutoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As riControl_dbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbCategoriaProduto")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_catProd As Long, ByVal Original_nome_catProd As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_catProd,Long)
            If (Original_nome_catProd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_catProd")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nome_catProd,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_catProd As Long, ByVal nome_catProd As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_catProd,Long)
            If (nome_catProd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_catProd")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nome_catProd,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_catProd As Long, ByVal nome_catProd As String, ByVal Original_id_catProd As Long, ByVal Original_nome_catProd As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_catProd,Long)
            If (nome_catProd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_catProd")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nome_catProd,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_id_catProd,Long)
            If (Original_nome_catProd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_catProd")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_nome_catProd,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nome_catProd As String, ByVal Original_id_catProd As Long, ByVal Original_nome_catProd As String) As Integer
            Return Me.Update(Original_id_catProd, nome_catProd, Original_id_catProd, Original_nome_catProd)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbClientesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbClientes"
            tableMapping.ColumnMappings.Add("id_cli", "id_cli")
            tableMapping.ColumnMappings.Add("nome_cli", "nome_cli")
            tableMapping.ColumnMappings.Add("tipo_cli", "tipo_cli")
            tableMapping.ColumnMappings.Add("doc_cli", "doc_cli")
            tableMapping.ColumnMappings.Add("tel_cli", "tel_cli")
            tableMapping.ColumnMappings.Add("cel_cli", "cel_cli")
            tableMapping.ColumnMappings.Add("rua_cli", "rua_cli")
            tableMapping.ColumnMappings.Add("num_cli", "num_cli")
            tableMapping.ColumnMappings.Add("bairro_cli", "bairro_cli")
            tableMapping.ColumnMappings.Add("cidade_cli", "cidade_cli")
            tableMapping.ColumnMappings.Add("uf_cli", "uf_cli")
            tableMapping.ColumnMappings.Add("cep_cli", "cep_cli")
            tableMapping.ColumnMappings.Add("pais_cli", "pais_cli")
            tableMapping.ColumnMappings.Add("obs_cli", "obs_cli")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[tbClientes] WHERE (([id_cli] = @Origi"& _ 
                "nal_id_cli) AND ([nome_cli] = @Original_nome_cli) AND ([tipo_cli] = @Original_ti"& _ 
                "po_cli) AND ([doc_cli] = @Original_doc_cli) AND ((@IsNull_tel_cli = 1 AND [tel_c"& _ 
                "li] IS NULL) OR ([tel_cli] = @Original_tel_cli)) AND ([cel_cli] = @Original_cel_"& _ 
                "cli) AND ((@IsNull_rua_cli = 1 AND [rua_cli] IS NULL) OR ([rua_cli] = @Original_"& _ 
                "rua_cli)) AND ((@IsNull_num_cli = 1 AND [num_cli] IS NULL) OR ([num_cli] = @Orig"& _ 
                "inal_num_cli)) AND ((@IsNull_bairro_cli = 1 AND [bairro_cli] IS NULL) OR ([bairr"& _ 
                "o_cli] = @Original_bairro_cli)) AND ([cidade_cli] = @Original_cidade_cli) AND (["& _ 
                "uf_cli] = @Original_uf_cli) AND ((@IsNull_cep_cli = 1 AND [cep_cli] IS NULL) OR "& _ 
                "([cep_cli] = @Original_cep_cli)) AND ([pais_cli] = @Original_pais_cli) AND ((@Is"& _ 
                "Null_obs_cli = 1 AND [obs_cli] IS NULL) OR ([obs_cli] = @Original_obs_cli)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_cli"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tipo_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tipo_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_doc_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "doc_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tel_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tel_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tel_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tel_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cel_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cel_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_rua_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "rua_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_rua_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rua_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_num_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "num_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_num_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "num_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bairro_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bairro_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bairro_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bairro_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cidade_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cidade_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_uf_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "uf_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_cep_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "cep_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cep_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cep_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_pais_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "pais_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_obs_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "obs_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_obs_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[tbClientes] ([id_cli], [nome_cli], [t"& _ 
                "ipo_cli], [doc_cli], [tel_cli], [cel_cli], [rua_cli], [num_cli], [bairro_cli], ["& _ 
                "cidade_cli], [uf_cli], [cep_cli], [pais_cli], [obs_cli]) VALUES (@id_cli, @nome_"& _ 
                "cli, @tipo_cli, @doc_cli, @tel_cli, @cel_cli, @rua_cli, @num_cli, @bairro_cli, @"& _ 
                "cidade_cli, @uf_cli, @cep_cli, @pais_cli, @obs_cli)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_cli"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tipo_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tipo_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@doc_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "doc_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tel_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tel_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cel_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cel_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@rua_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rua_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@num_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "num_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bairro_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bairro_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cidade_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cidade_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@uf_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "uf_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cep_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cep_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@pais_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "pais_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@obs_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[tbClientes] SET [id_cli] = @id_cli, [nome_"& _ 
                "cli] = @nome_cli, [tipo_cli] = @tipo_cli, [doc_cli] = @doc_cli, [tel_cli] = @tel"& _ 
                "_cli, [cel_cli] = @cel_cli, [rua_cli] = @rua_cli, [num_cli] = @num_cli, [bairro_"& _ 
                "cli] = @bairro_cli, [cidade_cli] = @cidade_cli, [uf_cli] = @uf_cli, [cep_cli] = "& _ 
                "@cep_cli, [pais_cli] = @pais_cli, [obs_cli] = @obs_cli WHERE (([id_cli] = @Origi"& _ 
                "nal_id_cli) AND ([nome_cli] = @Original_nome_cli) AND ([tipo_cli] = @Original_ti"& _ 
                "po_cli) AND ([doc_cli] = @Original_doc_cli) AND ((@IsNull_tel_cli = 1 AND [tel_c"& _ 
                "li] IS NULL) OR ([tel_cli] = @Original_tel_cli)) AND ([cel_cli] = @Original_cel_"& _ 
                "cli) AND ((@IsNull_rua_cli = 1 AND [rua_cli] IS NULL) OR ([rua_cli] = @Original_"& _ 
                "rua_cli)) AND ((@IsNull_num_cli = 1 AND [num_cli] IS NULL) OR ([num_cli] = @Orig"& _ 
                "inal_num_cli)) AND ((@IsNull_bairro_cli = 1 AND [bairro_cli] IS NULL) OR ([bairr"& _ 
                "o_cli] = @Original_bairro_cli)) AND ([cidade_cli] = @Original_cidade_cli) AND (["& _ 
                "uf_cli] = @Original_uf_cli) AND ((@IsNull_cep_cli = 1 AND [cep_cli] IS NULL) OR "& _ 
                "([cep_cli] = @Original_cep_cli)) AND ([pais_cli] = @Original_pais_cli) AND ((@Is"& _ 
                "Null_obs_cli = 1 AND [obs_cli] IS NULL) OR ([obs_cli] = @Original_obs_cli)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_cli"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tipo_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tipo_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@doc_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "doc_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tel_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tel_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cel_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cel_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@rua_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rua_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@num_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "num_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bairro_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bairro_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cidade_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cidade_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@uf_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "uf_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cep_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cep_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@pais_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "pais_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@obs_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_cli"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tipo_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tipo_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_doc_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "doc_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tel_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tel_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tel_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tel_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cel_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cel_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_rua_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "rua_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_rua_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rua_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_num_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "num_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_num_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "num_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bairro_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bairro_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bairro_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bairro_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cidade_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cidade_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_uf_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "uf_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_cep_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "cep_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cep_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cep_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_pais_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "pais_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_obs_cli"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "obs_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_obs_cli"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.riControl.My.MySettings.Default.riControl_dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id_cli], [nome_cli], [tipo_cli], [doc_cli], [tel_cli], [cel_cli], [rua_cl"& _ 
                "i], [num_cli], [bairro_cli], [cidade_cli], [uf_cli], [cep_cli], [pais_cli], [obs"& _ 
                "_cli] FROM [tbClientes]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As riControl_dbDataSet.tbClientesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As riControl_dbDataSet.tbClientesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As riControl_dbDataSet.tbClientesDataTable = New riControl_dbDataSet.tbClientesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As riControl_dbDataSet.tbClientesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As riControl_dbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbClientes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_cli As Long, ByVal Original_nome_cli As String, ByVal Original_tipo_cli As String, ByVal Original_doc_cli As String, ByVal Original_tel_cli As String, ByVal Original_cel_cli As String, ByVal Original_rua_cli As String, ByVal Original_num_cli As Global.System.Nullable(Of Integer), ByVal Original_bairro_cli As String, ByVal Original_cidade_cli As String, ByVal Original_uf_cli As String, ByVal Original_cep_cli As String, ByVal Original_pais_cli As String, ByVal Original_obs_cli As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_cli,Long)
            If (Original_nome_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_cli")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nome_cli,String)
            End If
            If (Original_tipo_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tipo_cli")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_tipo_cli,String)
            End If
            If (Original_doc_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_cli")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_doc_cli,String)
            End If
            If (Original_tel_cli Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_tel_cli,String)
            End If
            If (Original_cel_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cel_cli")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_cel_cli,String)
            End If
            If (Original_rua_cli Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_rua_cli,String)
            End If
            If (Original_num_cli.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_num_cli.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_bairro_cli Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_bairro_cli,String)
            End If
            If (Original_cidade_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cidade_cli")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_cidade_cli,String)
            End If
            If (Original_uf_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_uf_cli")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_uf_cli,String)
            End If
            If (Original_cep_cli Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_cep_cli,String)
            End If
            If (Original_pais_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pais_cli")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_pais_cli,String)
            End If
            If (Original_obs_cli Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_obs_cli,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_cli As Long, ByVal nome_cli As String, ByVal tipo_cli As String, ByVal doc_cli As String, ByVal tel_cli As String, ByVal cel_cli As String, ByVal rua_cli As String, ByVal num_cli As Global.System.Nullable(Of Integer), ByVal bairro_cli As String, ByVal cidade_cli As String, ByVal uf_cli As String, ByVal cep_cli As String, ByVal pais_cli As String, ByVal obs_cli As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_cli,Long)
            If (nome_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_cli")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nome_cli,String)
            End If
            If (tipo_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tipo_cli")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(tipo_cli,String)
            End If
            If (doc_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_cli")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(doc_cli,String)
            End If
            If (tel_cli Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(tel_cli,String)
            End If
            If (cel_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cel_cli")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(cel_cli,String)
            End If
            If (rua_cli Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(rua_cli,String)
            End If
            If (num_cli.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(num_cli.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (bairro_cli Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(bairro_cli,String)
            End If
            If (cidade_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cidade_cli")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(cidade_cli,String)
            End If
            If (uf_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("uf_cli")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(uf_cli,String)
            End If
            If (cep_cli Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(cep_cli,String)
            End If
            If (pais_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pais_cli")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(pais_cli,String)
            End If
            If (obs_cli Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(obs_cli,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id_cli As Long,  _
                    ByVal nome_cli As String,  _
                    ByVal tipo_cli As String,  _
                    ByVal doc_cli As String,  _
                    ByVal tel_cli As String,  _
                    ByVal cel_cli As String,  _
                    ByVal rua_cli As String,  _
                    ByVal num_cli As Global.System.Nullable(Of Integer),  _
                    ByVal bairro_cli As String,  _
                    ByVal cidade_cli As String,  _
                    ByVal uf_cli As String,  _
                    ByVal cep_cli As String,  _
                    ByVal pais_cli As String,  _
                    ByVal obs_cli As String,  _
                    ByVal Original_id_cli As Long,  _
                    ByVal Original_nome_cli As String,  _
                    ByVal Original_tipo_cli As String,  _
                    ByVal Original_doc_cli As String,  _
                    ByVal Original_tel_cli As String,  _
                    ByVal Original_cel_cli As String,  _
                    ByVal Original_rua_cli As String,  _
                    ByVal Original_num_cli As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bairro_cli As String,  _
                    ByVal Original_cidade_cli As String,  _
                    ByVal Original_uf_cli As String,  _
                    ByVal Original_cep_cli As String,  _
                    ByVal Original_pais_cli As String,  _
                    ByVal Original_obs_cli As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_cli,Long)
            If (nome_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nome_cli,String)
            End If
            If (tipo_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tipo_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(tipo_cli,String)
            End If
            If (doc_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(doc_cli,String)
            End If
            If (tel_cli Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(tel_cli,String)
            End If
            If (cel_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cel_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(cel_cli,String)
            End If
            If (rua_cli Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(rua_cli,String)
            End If
            If (num_cli.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(num_cli.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (bairro_cli Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(bairro_cli,String)
            End If
            If (cidade_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cidade_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(cidade_cli,String)
            End If
            If (uf_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("uf_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(uf_cli,String)
            End If
            If (cep_cli Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(cep_cli,String)
            End If
            If (pais_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pais_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(pais_cli,String)
            End If
            If (obs_cli Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(obs_cli,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_id_cli,Long)
            If (Original_nome_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_nome_cli,String)
            End If
            If (Original_tipo_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tipo_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_tipo_cli,String)
            End If
            If (Original_doc_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_doc_cli,String)
            End If
            If (Original_tel_cli Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_tel_cli,String)
            End If
            If (Original_cel_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cel_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_cel_cli,String)
            End If
            If (Original_rua_cli Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_rua_cli,String)
            End If
            If (Original_num_cli.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_num_cli.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_bairro_cli Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_bairro_cli,String)
            End If
            If (Original_cidade_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cidade_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_cidade_cli,String)
            End If
            If (Original_uf_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_uf_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_uf_cli,String)
            End If
            If (Original_cep_cli Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_cep_cli,String)
            End If
            If (Original_pais_cli Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pais_cli")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_pais_cli,String)
            End If
            If (Original_obs_cli Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_obs_cli,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nome_cli As String,  _
                    ByVal tipo_cli As String,  _
                    ByVal doc_cli As String,  _
                    ByVal tel_cli As String,  _
                    ByVal cel_cli As String,  _
                    ByVal rua_cli As String,  _
                    ByVal num_cli As Global.System.Nullable(Of Integer),  _
                    ByVal bairro_cli As String,  _
                    ByVal cidade_cli As String,  _
                    ByVal uf_cli As String,  _
                    ByVal cep_cli As String,  _
                    ByVal pais_cli As String,  _
                    ByVal obs_cli As String,  _
                    ByVal Original_id_cli As Long,  _
                    ByVal Original_nome_cli As String,  _
                    ByVal Original_tipo_cli As String,  _
                    ByVal Original_doc_cli As String,  _
                    ByVal Original_tel_cli As String,  _
                    ByVal Original_cel_cli As String,  _
                    ByVal Original_rua_cli As String,  _
                    ByVal Original_num_cli As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bairro_cli As String,  _
                    ByVal Original_cidade_cli As String,  _
                    ByVal Original_uf_cli As String,  _
                    ByVal Original_cep_cli As String,  _
                    ByVal Original_pais_cli As String,  _
                    ByVal Original_obs_cli As String) As Integer
            Return Me.Update(Original_id_cli, nome_cli, tipo_cli, doc_cli, tel_cli, cel_cli, rua_cli, num_cli, bairro_cli, cidade_cli, uf_cli, cep_cli, pais_cli, obs_cli, Original_id_cli, Original_nome_cli, Original_tipo_cli, Original_doc_cli, Original_tel_cli, Original_cel_cli, Original_rua_cli, Original_num_cli, Original_bairro_cli, Original_cidade_cli, Original_uf_cli, Original_cep_cli, Original_pais_cli, Original_obs_cli)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbFormaPagamentoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbFormaPagamento"
            tableMapping.ColumnMappings.Add("id_formPag", "id_formPag")
            tableMapping.ColumnMappings.Add("nome_formPag", "nome_formPag")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[tbFormaPagamento] WHERE (([id_formPag"& _ 
                "] = @Original_id_formPag) AND ([nome_formPag] = @Original_nome_formPag))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_formPag"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_formPag"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_formPag"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_formPag"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[tbFormaPagamento] ([id_formPag], [nom"& _ 
                "e_formPag]) VALUES (@id_formPag, @nome_formPag)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_formPag"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_formPag"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_formPag"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_formPag"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[tbFormaPagamento] SET [id_formPag] = @id_f"& _ 
                "ormPag, [nome_formPag] = @nome_formPag WHERE (([id_formPag] = @Original_id_formP"& _ 
                "ag) AND ([nome_formPag] = @Original_nome_formPag))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_formPag"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_formPag"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_formPag"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_formPag"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_formPag"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_formPag"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_formPag"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_formPag"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.riControl.My.MySettings.Default.riControl_dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id_formPag], [nome_formPag] FROM [tbFormaPagamento]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As riControl_dbDataSet.tbFormaPagamentoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As riControl_dbDataSet.tbFormaPagamentoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As riControl_dbDataSet.tbFormaPagamentoDataTable = New riControl_dbDataSet.tbFormaPagamentoDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As riControl_dbDataSet.tbFormaPagamentoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As riControl_dbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbFormaPagamento")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_formPag As Long, ByVal Original_nome_formPag As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_formPag,Long)
            If (Original_nome_formPag Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_formPag")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nome_formPag,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_formPag As Long, ByVal nome_formPag As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_formPag,Long)
            If (nome_formPag Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_formPag")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nome_formPag,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_formPag As Long, ByVal nome_formPag As String, ByVal Original_id_formPag As Long, ByVal Original_nome_formPag As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_formPag,Long)
            If (nome_formPag Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_formPag")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nome_formPag,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_id_formPag,Long)
            If (Original_nome_formPag Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_formPag")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_nome_formPag,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nome_formPag As String, ByVal Original_id_formPag As Long, ByVal Original_nome_formPag As String) As Integer
            Return Me.Update(Original_id_formPag, nome_formPag, Original_id_formPag, Original_nome_formPag)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbFornecedoresTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbFornecedores"
            tableMapping.ColumnMappings.Add("id_forn", "id_forn")
            tableMapping.ColumnMappings.Add("nome_forn", "nome_forn")
            tableMapping.ColumnMappings.Add("tipo_forn", "tipo_forn")
            tableMapping.ColumnMappings.Add("doc_forn", "doc_forn")
            tableMapping.ColumnMappings.Add("tel_forn", "tel_forn")
            tableMapping.ColumnMappings.Add("cel_forn", "cel_forn")
            tableMapping.ColumnMappings.Add("rua_forn", "rua_forn")
            tableMapping.ColumnMappings.Add("num_forn", "num_forn")
            tableMapping.ColumnMappings.Add("bairro_forn", "bairro_forn")
            tableMapping.ColumnMappings.Add("cidade_forn", "cidade_forn")
            tableMapping.ColumnMappings.Add("uf_forn", "uf_forn")
            tableMapping.ColumnMappings.Add("cep_forn", "cep_forn")
            tableMapping.ColumnMappings.Add("pais_forn", "pais_forn")
            tableMapping.ColumnMappings.Add("obs_forn", "obs_forn")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[tbFornecedores] WHERE (([id_forn] = @"& _ 
                "Original_id_forn) AND ([nome_forn] = @Original_nome_forn) AND ([tipo_forn] = @Or"& _ 
                "iginal_tipo_forn) AND ([doc_forn] = @Original_doc_forn) AND ((@IsNull_tel_forn ="& _ 
                " 1 AND [tel_forn] IS NULL) OR ([tel_forn] = @Original_tel_forn)) AND ([cel_forn]"& _ 
                " = @Original_cel_forn) AND ((@IsNull_rua_forn = 1 AND [rua_forn] IS NULL) OR ([r"& _ 
                "ua_forn] = @Original_rua_forn)) AND ((@IsNull_num_forn = 1 AND [num_forn] IS NUL"& _ 
                "L) OR ([num_forn] = @Original_num_forn)) AND ((@IsNull_bairro_forn = 1 AND [bair"& _ 
                "ro_forn] IS NULL) OR ([bairro_forn] = @Original_bairro_forn)) AND ([cidade_forn]"& _ 
                " = @Original_cidade_forn) AND ([uf_forn] = @Original_uf_forn) AND ((@IsNull_cep_"& _ 
                "forn = 1 AND [cep_forn] IS NULL) OR ([cep_forn] = @Original_cep_forn)) AND ([pai"& _ 
                "s_forn] = @Original_pais_forn) AND ((@IsNull_obs_forn = 1 AND [obs_forn] IS NULL"& _ 
                ") OR ([obs_forn] = @Original_obs_forn)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tipo_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tipo_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_doc_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "doc_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tel_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tel_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tel_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tel_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cel_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cel_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_rua_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "rua_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_rua_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rua_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_num_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "num_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_num_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "num_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bairro_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bairro_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bairro_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bairro_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cidade_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cidade_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_uf_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "uf_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_cep_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "cep_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cep_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cep_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_pais_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "pais_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_obs_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "obs_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_obs_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[tbFornecedores] ([id_forn], [nome_for"& _ 
                "n], [tipo_forn], [doc_forn], [tel_forn], [cel_forn], [rua_forn], [num_forn], [ba"& _ 
                "irro_forn], [cidade_forn], [uf_forn], [cep_forn], [pais_forn], [obs_forn]) VALUE"& _ 
                "S (@id_forn, @nome_forn, @tipo_forn, @doc_forn, @tel_forn, @cel_forn, @rua_forn,"& _ 
                " @num_forn, @bairro_forn, @cidade_forn, @uf_forn, @cep_forn, @pais_forn, @obs_fo"& _ 
                "rn)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tipo_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tipo_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@doc_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "doc_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tel_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tel_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cel_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cel_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@rua_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rua_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@num_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "num_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bairro_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bairro_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cidade_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cidade_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@uf_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "uf_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cep_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cep_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@pais_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "pais_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@obs_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[tbFornecedores] SET [id_forn] = @id_forn, "& _ 
                "[nome_forn] = @nome_forn, [tipo_forn] = @tipo_forn, [doc_forn] = @doc_forn, [tel"& _ 
                "_forn] = @tel_forn, [cel_forn] = @cel_forn, [rua_forn] = @rua_forn, [num_forn] ="& _ 
                " @num_forn, [bairro_forn] = @bairro_forn, [cidade_forn] = @cidade_forn, [uf_forn"& _ 
                "] = @uf_forn, [cep_forn] = @cep_forn, [pais_forn] = @pais_forn, [obs_forn] = @ob"& _ 
                "s_forn WHERE (([id_forn] = @Original_id_forn) AND ([nome_forn] = @Original_nome_"& _ 
                "forn) AND ([tipo_forn] = @Original_tipo_forn) AND ([doc_forn] = @Original_doc_fo"& _ 
                "rn) AND ((@IsNull_tel_forn = 1 AND [tel_forn] IS NULL) OR ([tel_forn] = @Origina"& _ 
                "l_tel_forn)) AND ([cel_forn] = @Original_cel_forn) AND ((@IsNull_rua_forn = 1 AN"& _ 
                "D [rua_forn] IS NULL) OR ([rua_forn] = @Original_rua_forn)) AND ((@IsNull_num_fo"& _ 
                "rn = 1 AND [num_forn] IS NULL) OR ([num_forn] = @Original_num_forn)) AND ((@IsNu"& _ 
                "ll_bairro_forn = 1 AND [bairro_forn] IS NULL) OR ([bairro_forn] = @Original_bair"& _ 
                "ro_forn)) AND ([cidade_forn] = @Original_cidade_forn) AND ([uf_forn] = @Original"& _ 
                "_uf_forn) AND ((@IsNull_cep_forn = 1 AND [cep_forn] IS NULL) OR ([cep_forn] = @O"& _ 
                "riginal_cep_forn)) AND ([pais_forn] = @Original_pais_forn) AND ((@IsNull_obs_for"& _ 
                "n = 1 AND [obs_forn] IS NULL) OR ([obs_forn] = @Original_obs_forn)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tipo_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tipo_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@doc_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "doc_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tel_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tel_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cel_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cel_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@rua_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rua_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@num_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "num_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bairro_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bairro_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cidade_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cidade_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@uf_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "uf_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@cep_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cep_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@pais_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "pais_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@obs_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tipo_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tipo_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_doc_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "doc_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_tel_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "tel_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tel_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "tel_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cel_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cel_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_rua_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "rua_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_rua_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "rua_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_num_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "num_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_num_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "num_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bairro_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bairro_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bairro_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bairro_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cidade_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cidade_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_uf_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "uf_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_cep_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "cep_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_cep_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "cep_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_pais_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "pais_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_obs_forn"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "obs_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_obs_forn"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.riControl.My.MySettings.Default.riControl_dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id_forn], [nome_forn], [tipo_forn], [doc_forn], [tel_forn], [cel_forn], ["& _ 
                "rua_forn], [num_forn], [bairro_forn], [cidade_forn], [uf_forn], [cep_forn], [pai"& _ 
                "s_forn], [obs_forn] FROM [tbFornecedores]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As riControl_dbDataSet.tbFornecedoresDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As riControl_dbDataSet.tbFornecedoresDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As riControl_dbDataSet.tbFornecedoresDataTable = New riControl_dbDataSet.tbFornecedoresDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As riControl_dbDataSet.tbFornecedoresDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As riControl_dbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbFornecedores")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_forn As Long, ByVal Original_nome_forn As String, ByVal Original_tipo_forn As String, ByVal Original_doc_forn As String, ByVal Original_tel_forn As String, ByVal Original_cel_forn As String, ByVal Original_rua_forn As String, ByVal Original_num_forn As Global.System.Nullable(Of Long), ByVal Original_bairro_forn As String, ByVal Original_cidade_forn As String, ByVal Original_uf_forn As String, ByVal Original_cep_forn As String, ByVal Original_pais_forn As String, ByVal Original_obs_forn As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_forn,Long)
            If (Original_nome_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_forn")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nome_forn,String)
            End If
            If (Original_tipo_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tipo_forn")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_tipo_forn,String)
            End If
            If (Original_doc_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_forn")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_doc_forn,String)
            End If
            If (Original_tel_forn Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_tel_forn,String)
            End If
            If (Original_cel_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cel_forn")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_cel_forn,String)
            End If
            If (Original_rua_forn Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_rua_forn,String)
            End If
            If (Original_num_forn.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_num_forn.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_bairro_forn Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_bairro_forn,String)
            End If
            If (Original_cidade_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cidade_forn")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_cidade_forn,String)
            End If
            If (Original_uf_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_uf_forn")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_uf_forn,String)
            End If
            If (Original_cep_forn Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_cep_forn,String)
            End If
            If (Original_pais_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pais_forn")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_pais_forn,String)
            End If
            If (Original_obs_forn Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_obs_forn,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_forn As Long, ByVal nome_forn As String, ByVal tipo_forn As String, ByVal doc_forn As String, ByVal tel_forn As String, ByVal cel_forn As String, ByVal rua_forn As String, ByVal num_forn As Global.System.Nullable(Of Long), ByVal bairro_forn As String, ByVal cidade_forn As String, ByVal uf_forn As String, ByVal cep_forn As String, ByVal pais_forn As String, ByVal obs_forn As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_forn,Long)
            If (nome_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_forn")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nome_forn,String)
            End If
            If (tipo_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tipo_forn")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(tipo_forn,String)
            End If
            If (doc_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_forn")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(doc_forn,String)
            End If
            If (tel_forn Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(tel_forn,String)
            End If
            If (cel_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cel_forn")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(cel_forn,String)
            End If
            If (rua_forn Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(rua_forn,String)
            End If
            If (num_forn.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(num_forn.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (bairro_forn Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(bairro_forn,String)
            End If
            If (cidade_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cidade_forn")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(cidade_forn,String)
            End If
            If (uf_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("uf_forn")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(uf_forn,String)
            End If
            If (cep_forn Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(cep_forn,String)
            End If
            If (pais_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pais_forn")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(pais_forn,String)
            End If
            If (obs_forn Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(obs_forn,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id_forn As Long,  _
                    ByVal nome_forn As String,  _
                    ByVal tipo_forn As String,  _
                    ByVal doc_forn As String,  _
                    ByVal tel_forn As String,  _
                    ByVal cel_forn As String,  _
                    ByVal rua_forn As String,  _
                    ByVal num_forn As Global.System.Nullable(Of Long),  _
                    ByVal bairro_forn As String,  _
                    ByVal cidade_forn As String,  _
                    ByVal uf_forn As String,  _
                    ByVal cep_forn As String,  _
                    ByVal pais_forn As String,  _
                    ByVal obs_forn As String,  _
                    ByVal Original_id_forn As Long,  _
                    ByVal Original_nome_forn As String,  _
                    ByVal Original_tipo_forn As String,  _
                    ByVal Original_doc_forn As String,  _
                    ByVal Original_tel_forn As String,  _
                    ByVal Original_cel_forn As String,  _
                    ByVal Original_rua_forn As String,  _
                    ByVal Original_num_forn As Global.System.Nullable(Of Long),  _
                    ByVal Original_bairro_forn As String,  _
                    ByVal Original_cidade_forn As String,  _
                    ByVal Original_uf_forn As String,  _
                    ByVal Original_cep_forn As String,  _
                    ByVal Original_pais_forn As String,  _
                    ByVal Original_obs_forn As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_forn,Long)
            If (nome_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nome_forn,String)
            End If
            If (tipo_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tipo_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(tipo_forn,String)
            End If
            If (doc_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(doc_forn,String)
            End If
            If (tel_forn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(tel_forn,String)
            End If
            If (cel_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cel_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(cel_forn,String)
            End If
            If (rua_forn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(rua_forn,String)
            End If
            If (num_forn.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(num_forn.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (bairro_forn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(bairro_forn,String)
            End If
            If (cidade_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cidade_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(cidade_forn,String)
            End If
            If (uf_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("uf_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(uf_forn,String)
            End If
            If (cep_forn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(cep_forn,String)
            End If
            If (pais_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pais_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(pais_forn,String)
            End If
            If (obs_forn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(obs_forn,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_id_forn,Long)
            If (Original_nome_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_nome_forn,String)
            End If
            If (Original_tipo_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tipo_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_tipo_forn,String)
            End If
            If (Original_doc_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_doc_forn,String)
            End If
            If (Original_tel_forn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_tel_forn,String)
            End If
            If (Original_cel_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cel_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_cel_forn,String)
            End If
            If (Original_rua_forn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_rua_forn,String)
            End If
            If (Original_num_forn.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_num_forn.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_bairro_forn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_bairro_forn,String)
            End If
            If (Original_cidade_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cidade_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_cidade_forn,String)
            End If
            If (Original_uf_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_uf_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_uf_forn,String)
            End If
            If (Original_cep_forn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_cep_forn,String)
            End If
            If (Original_pais_forn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pais_forn")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_pais_forn,String)
            End If
            If (Original_obs_forn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_obs_forn,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal nome_forn As String,  _
                    ByVal tipo_forn As String,  _
                    ByVal doc_forn As String,  _
                    ByVal tel_forn As String,  _
                    ByVal cel_forn As String,  _
                    ByVal rua_forn As String,  _
                    ByVal num_forn As Global.System.Nullable(Of Long),  _
                    ByVal bairro_forn As String,  _
                    ByVal cidade_forn As String,  _
                    ByVal uf_forn As String,  _
                    ByVal cep_forn As String,  _
                    ByVal pais_forn As String,  _
                    ByVal obs_forn As String,  _
                    ByVal Original_id_forn As Long,  _
                    ByVal Original_nome_forn As String,  _
                    ByVal Original_tipo_forn As String,  _
                    ByVal Original_doc_forn As String,  _
                    ByVal Original_tel_forn As String,  _
                    ByVal Original_cel_forn As String,  _
                    ByVal Original_rua_forn As String,  _
                    ByVal Original_num_forn As Global.System.Nullable(Of Long),  _
                    ByVal Original_bairro_forn As String,  _
                    ByVal Original_cidade_forn As String,  _
                    ByVal Original_uf_forn As String,  _
                    ByVal Original_cep_forn As String,  _
                    ByVal Original_pais_forn As String,  _
                    ByVal Original_obs_forn As String) As Integer
            Return Me.Update(Original_id_forn, nome_forn, tipo_forn, doc_forn, tel_forn, cel_forn, rua_forn, num_forn, bairro_forn, cidade_forn, uf_forn, cep_forn, pais_forn, obs_forn, Original_id_forn, Original_nome_forn, Original_tipo_forn, Original_doc_forn, Original_tel_forn, Original_cel_forn, Original_rua_forn, Original_num_forn, Original_bairro_forn, Original_cidade_forn, Original_uf_forn, Original_cep_forn, Original_pais_forn, Original_obs_forn)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbFornecedores_tbPedidosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbFornecedores_tbPedidos"
            tableMapping.ColumnMappings.Add("tbFornecedores_id_forn", "tbFornecedores_id_forn")
            tableMapping.ColumnMappings.Add("tbPedidos_id_pedido", "tbPedidos_id_pedido")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[tbFornecedores_tbPedidos] WHERE (([tb"& _ 
                "Fornecedores_id_forn] = @Original_tbFornecedores_id_forn) AND ([tbPedidos_id_ped"& _ 
                "ido] = @Original_tbPedidos_id_pedido))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbFornecedores_id_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbFornecedores_id_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbPedidos_id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbPedidos_id_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[tbFornecedores_tbPedidos] ([tbFornece"& _ 
                "dores_id_forn], [tbPedidos_id_pedido]) VALUES (@tbFornecedores_id_forn, @tbPedid"& _ 
                "os_id_pedido)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbFornecedores_id_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbFornecedores_id_forn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbPedidos_id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbPedidos_id_pedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[tbFornecedores_tbPedidos] SET [tbFornecedo"& _ 
                "res_id_forn] = @tbFornecedores_id_forn, [tbPedidos_id_pedido] = @tbPedidos_id_pe"& _ 
                "dido WHERE (([tbFornecedores_id_forn] = @Original_tbFornecedores_id_forn) AND (["& _ 
                "tbPedidos_id_pedido] = @Original_tbPedidos_id_pedido))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbFornecedores_id_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbFornecedores_id_forn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbPedidos_id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbPedidos_id_pedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbFornecedores_id_forn"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbFornecedores_id_forn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbPedidos_id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbPedidos_id_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.riControl.My.MySettings.Default.riControl_dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [tbFornecedores_id_forn], [tbPedidos_id_pedido] FROM [tbFornecedores_tbPed"& _ 
                "idos]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As riControl_dbDataSet.tbFornecedores_tbPedidosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As riControl_dbDataSet.tbFornecedores_tbPedidosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As riControl_dbDataSet.tbFornecedores_tbPedidosDataTable = New riControl_dbDataSet.tbFornecedores_tbPedidosDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As riControl_dbDataSet.tbFornecedores_tbPedidosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As riControl_dbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbFornecedores_tbPedidos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_tbFornecedores_id_forn As Long, ByVal Original_tbPedidos_id_pedido As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_tbFornecedores_id_forn,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_tbPedidos_id_pedido,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal tbFornecedores_id_forn As Long, ByVal tbPedidos_id_pedido As Long) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(tbFornecedores_id_forn,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(tbPedidos_id_pedido,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal tbFornecedores_id_forn As Long, ByVal tbPedidos_id_pedido As Long, ByVal Original_tbFornecedores_id_forn As Long, ByVal Original_tbPedidos_id_pedido As Long) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(tbFornecedores_id_forn,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(tbPedidos_id_pedido,Long)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_tbFornecedores_id_forn,Long)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_tbPedidos_id_pedido,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_tbFornecedores_id_forn As Long, ByVal Original_tbPedidos_id_pedido As Long) As Integer
            Return Me.Update(Original_tbFornecedores_id_forn, Original_tbPedidos_id_pedido, Original_tbFornecedores_id_forn, Original_tbPedidos_id_pedido)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbPedidosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbPedidos"
            tableMapping.ColumnMappings.Add("id_pedido", "id_pedido")
            tableMapping.ColumnMappings.Add("tbUnidade_id_unidade", "tbUnidade_id_unidade")
            tableMapping.ColumnMappings.Add("tbFormaPagamento_id_formPag", "tbFormaPagamento_id_formPag")
            tableMapping.ColumnMappings.Add("tbClientes_id_cli", "tbClientes_id_cli")
            tableMapping.ColumnMappings.Add("datainicio_pedido", "datainicio_pedido")
            tableMapping.ColumnMappings.Add("status_pedido", "status_pedido")
            tableMapping.ColumnMappings.Add("valor_pedido", "valor_pedido")
            tableMapping.ColumnMappings.Add("datafechamento_pedido", "datafechamento_pedido")
            tableMapping.ColumnMappings.Add("obs_pedido", "obs_pedido")
            tableMapping.ColumnMappings.Add("quant_pedido", "quant_pedido")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[tbPedidos] WHERE (([id_pedido] = @Ori"& _ 
                "ginal_id_pedido) AND ([tbUnidade_id_unidade] = @Original_tbUnidade_id_unidade) A"& _ 
                "ND ([tbFormaPagamento_id_formPag] = @Original_tbFormaPagamento_id_formPag) AND ("& _ 
                "[tbClientes_id_cli] = @Original_tbClientes_id_cli) AND ([datainicio_pedido] = @O"& _ 
                "riginal_datainicio_pedido) AND ([status_pedido] = @Original_status_pedido) AND ("& _ 
                "[valor_pedido] = @Original_valor_pedido) AND ((@IsNull_datafechamento_pedido = 1"& _ 
                " AND [datafechamento_pedido] IS NULL) OR ([datafechamento_pedido] = @Original_da"& _ 
                "tafechamento_pedido)) AND ((@IsNull_obs_pedido = 1 AND [obs_pedido] IS NULL) OR "& _ 
                "([obs_pedido] = @Original_obs_pedido)) AND ([quant_pedido] = @Original_quant_ped"& _ 
                "ido))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbUnidade_id_unidade"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbUnidade_id_unidade"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbFormaPagamento_id_formPag"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbFormaPagamento_id_formPag"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbClientes_id_cli"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbClientes_id_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_datainicio_pedido"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "datainicio_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_status_pedido"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_valor_pedido"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "valor_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_datafechamento_pedido"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "datafechamento_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_datafechamento_pedido"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "datafechamento_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_obs_pedido"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "obs_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_obs_pedido"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_quant_pedido"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "quant_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[tbPedidos] ([id_pedido], [tbUnidade_i"& _ 
                "d_unidade], [tbFormaPagamento_id_formPag], [tbClientes_id_cli], [datainicio_pedi"& _ 
                "do], [status_pedido], [valor_pedido], [datafechamento_pedido], [obs_pedido], [qu"& _ 
                "ant_pedido]) VALUES (@id_pedido, @tbUnidade_id_unidade, @tbFormaPagamento_id_for"& _ 
                "mPag, @tbClientes_id_cli, @datainicio_pedido, @status_pedido, @valor_pedido, @da"& _ 
                "tafechamento_pedido, @obs_pedido, @quant_pedido)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_pedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbUnidade_id_unidade"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbUnidade_id_unidade"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbFormaPagamento_id_formPag"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbFormaPagamento_id_formPag"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbClientes_id_cli"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbClientes_id_cli"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@datainicio_pedido"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "datainicio_pedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@status_pedido"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status_pedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@valor_pedido"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "valor_pedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@datafechamento_pedido"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "datafechamento_pedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@obs_pedido"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_pedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@quant_pedido"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "quant_pedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[tbPedidos] SET [id_pedido] = @id_pedido, ["& _ 
                "tbUnidade_id_unidade] = @tbUnidade_id_unidade, [tbFormaPagamento_id_formPag] = @"& _ 
                "tbFormaPagamento_id_formPag, [tbClientes_id_cli] = @tbClientes_id_cli, [datainic"& _ 
                "io_pedido] = @datainicio_pedido, [status_pedido] = @status_pedido, [valor_pedido"& _ 
                "] = @valor_pedido, [datafechamento_pedido] = @datafechamento_pedido, [obs_pedido"& _ 
                "] = @obs_pedido, [quant_pedido] = @quant_pedido WHERE (([id_pedido] = @Original_"& _ 
                "id_pedido) AND ([tbUnidade_id_unidade] = @Original_tbUnidade_id_unidade) AND ([t"& _ 
                "bFormaPagamento_id_formPag] = @Original_tbFormaPagamento_id_formPag) AND ([tbCli"& _ 
                "entes_id_cli] = @Original_tbClientes_id_cli) AND ([datainicio_pedido] = @Origina"& _ 
                "l_datainicio_pedido) AND ([status_pedido] = @Original_status_pedido) AND ([valor"& _ 
                "_pedido] = @Original_valor_pedido) AND ((@IsNull_datafechamento_pedido = 1 AND ["& _ 
                "datafechamento_pedido] IS NULL) OR ([datafechamento_pedido] = @Original_datafech"& _ 
                "amento_pedido)) AND ((@IsNull_obs_pedido = 1 AND [obs_pedido] IS NULL) OR ([obs_"& _ 
                "pedido] = @Original_obs_pedido)) AND ([quant_pedido] = @Original_quant_pedido))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_pedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbUnidade_id_unidade"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbUnidade_id_unidade"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbFormaPagamento_id_formPag"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbFormaPagamento_id_formPag"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbClientes_id_cli"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbClientes_id_cli"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@datainicio_pedido"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "datainicio_pedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@status_pedido"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status_pedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@valor_pedido"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "valor_pedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@datafechamento_pedido"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "datafechamento_pedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@obs_pedido"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_pedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@quant_pedido"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "quant_pedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbUnidade_id_unidade"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbUnidade_id_unidade"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbFormaPagamento_id_formPag"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbFormaPagamento_id_formPag"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbClientes_id_cli"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbClientes_id_cli"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_datainicio_pedido"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "datainicio_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_status_pedido"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "status_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_valor_pedido"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "valor_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_datafechamento_pedido"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "datafechamento_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_datafechamento_pedido"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "datafechamento_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_obs_pedido"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "obs_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_obs_pedido"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "obs_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_quant_pedido"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "quant_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.riControl.My.MySettings.Default.riControl_dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id_pedido], [tbUnidade_id_unidade], [tbFormaPagamento_id_formPag], [tbCli"& _ 
                "entes_id_cli], [datainicio_pedido], [status_pedido], [valor_pedido], [datafecham"& _ 
                "ento_pedido], [obs_pedido], [quant_pedido] FROM [tbPedidos]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As riControl_dbDataSet.tbPedidosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As riControl_dbDataSet.tbPedidosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As riControl_dbDataSet.tbPedidosDataTable = New riControl_dbDataSet.tbPedidosDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As riControl_dbDataSet.tbPedidosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As riControl_dbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbPedidos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_pedido As Long, ByVal Original_tbUnidade_id_unidade As Long, ByVal Original_tbFormaPagamento_id_formPag As Long, ByVal Original_tbClientes_id_cli As Long, ByVal Original_datainicio_pedido As Date, ByVal Original_status_pedido As String, ByVal Original_valor_pedido As Double, ByVal Original_datafechamento_pedido As Global.System.Nullable(Of Date), ByVal Original_obs_pedido As String, ByVal Original_quant_pedido As Double) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_pedido,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_tbUnidade_id_unidade,Long)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_tbFormaPagamento_id_formPag,Long)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_tbClientes_id_cli,Long)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_datainicio_pedido,Date)
            If (Original_status_pedido Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status_pedido")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_status_pedido,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_valor_pedido,Double)
            If (Original_datafechamento_pedido.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_datafechamento_pedido.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_obs_pedido Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_obs_pedido,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_quant_pedido,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_pedido As Long, ByVal tbUnidade_id_unidade As Long, ByVal tbFormaPagamento_id_formPag As Long, ByVal tbClientes_id_cli As Long, ByVal datainicio_pedido As Date, ByVal status_pedido As String, ByVal valor_pedido As Double, ByVal datafechamento_pedido As Global.System.Nullable(Of Date), ByVal obs_pedido As String, ByVal quant_pedido As Double) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_pedido,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(tbUnidade_id_unidade,Long)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(tbFormaPagamento_id_formPag,Long)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(tbClientes_id_cli,Long)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(datainicio_pedido,Date)
            If (status_pedido Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status_pedido")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(status_pedido,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(valor_pedido,Double)
            If (datafechamento_pedido.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(datafechamento_pedido.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (obs_pedido Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(obs_pedido,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(quant_pedido,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id_pedido As Long,  _
                    ByVal tbUnidade_id_unidade As Long,  _
                    ByVal tbFormaPagamento_id_formPag As Long,  _
                    ByVal tbClientes_id_cli As Long,  _
                    ByVal datainicio_pedido As Date,  _
                    ByVal status_pedido As String,  _
                    ByVal valor_pedido As Double,  _
                    ByVal datafechamento_pedido As Global.System.Nullable(Of Date),  _
                    ByVal obs_pedido As String,  _
                    ByVal quant_pedido As Double,  _
                    ByVal Original_id_pedido As Long,  _
                    ByVal Original_tbUnidade_id_unidade As Long,  _
                    ByVal Original_tbFormaPagamento_id_formPag As Long,  _
                    ByVal Original_tbClientes_id_cli As Long,  _
                    ByVal Original_datainicio_pedido As Date,  _
                    ByVal Original_status_pedido As String,  _
                    ByVal Original_valor_pedido As Double,  _
                    ByVal Original_datafechamento_pedido As Global.System.Nullable(Of Date),  _
                    ByVal Original_obs_pedido As String,  _
                    ByVal Original_quant_pedido As Double) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_pedido,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(tbUnidade_id_unidade,Long)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(tbFormaPagamento_id_formPag,Long)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(tbClientes_id_cli,Long)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(datainicio_pedido,Date)
            If (status_pedido Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status_pedido")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(status_pedido,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(valor_pedido,Double)
            If (datafechamento_pedido.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(datafechamento_pedido.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (obs_pedido Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(obs_pedido,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(quant_pedido,Double)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_id_pedido,Long)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_tbUnidade_id_unidade,Long)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_tbFormaPagamento_id_formPag,Long)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_tbClientes_id_cli,Long)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_datainicio_pedido,Date)
            If (Original_status_pedido Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status_pedido")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_status_pedido,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_valor_pedido,Double)
            If (Original_datafechamento_pedido.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_datafechamento_pedido.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_obs_pedido Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_obs_pedido,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_quant_pedido,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal tbUnidade_id_unidade As Long,  _
                    ByVal tbFormaPagamento_id_formPag As Long,  _
                    ByVal tbClientes_id_cli As Long,  _
                    ByVal datainicio_pedido As Date,  _
                    ByVal status_pedido As String,  _
                    ByVal valor_pedido As Double,  _
                    ByVal datafechamento_pedido As Global.System.Nullable(Of Date),  _
                    ByVal obs_pedido As String,  _
                    ByVal quant_pedido As Double,  _
                    ByVal Original_id_pedido As Long,  _
                    ByVal Original_tbUnidade_id_unidade As Long,  _
                    ByVal Original_tbFormaPagamento_id_formPag As Long,  _
                    ByVal Original_tbClientes_id_cli As Long,  _
                    ByVal Original_datainicio_pedido As Date,  _
                    ByVal Original_status_pedido As String,  _
                    ByVal Original_valor_pedido As Double,  _
                    ByVal Original_datafechamento_pedido As Global.System.Nullable(Of Date),  _
                    ByVal Original_obs_pedido As String,  _
                    ByVal Original_quant_pedido As Double) As Integer
            Return Me.Update(Original_id_pedido, tbUnidade_id_unidade, tbFormaPagamento_id_formPag, tbClientes_id_cli, datainicio_pedido, status_pedido, valor_pedido, datafechamento_pedido, obs_pedido, quant_pedido, Original_id_pedido, Original_tbUnidade_id_unidade, Original_tbFormaPagamento_id_formPag, Original_tbClientes_id_cli, Original_datainicio_pedido, Original_status_pedido, Original_valor_pedido, Original_datafechamento_pedido, Original_obs_pedido, Original_quant_pedido)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbPedidos_tbProdutosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbPedidos_tbProdutos"
            tableMapping.ColumnMappings.Add("tbPedidos_id_pedido", "tbPedidos_id_pedido")
            tableMapping.ColumnMappings.Add("tbProdutos_id_prod", "tbProdutos_id_prod")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[tbPedidos_tbProdutos] WHERE (([tbPedi"& _ 
                "dos_id_pedido] = @Original_tbPedidos_id_pedido) AND ([tbProdutos_id_prod] = @Ori"& _ 
                "ginal_tbProdutos_id_prod))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbPedidos_id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbPedidos_id_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbProdutos_id_prod"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbProdutos_id_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[tbPedidos_tbProdutos] ([tbPedidos_id_"& _ 
                "pedido], [tbProdutos_id_prod]) VALUES (@tbPedidos_id_pedido, @tbProdutos_id_prod"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbPedidos_id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbPedidos_id_pedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbProdutos_id_prod"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbProdutos_id_prod"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[tbPedidos_tbProdutos] SET [tbPedidos_id_pe"& _ 
                "dido] = @tbPedidos_id_pedido, [tbProdutos_id_prod] = @tbProdutos_id_prod WHERE ("& _ 
                "([tbPedidos_id_pedido] = @Original_tbPedidos_id_pedido) AND ([tbProdutos_id_prod"& _ 
                "] = @Original_tbProdutos_id_prod))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbPedidos_id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbPedidos_id_pedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbProdutos_id_prod"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbProdutos_id_prod"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbPedidos_id_pedido"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbPedidos_id_pedido"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbProdutos_id_prod"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbProdutos_id_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.riControl.My.MySettings.Default.riControl_dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [tbPedidos_id_pedido], [tbProdutos_id_prod] FROM [tbPedidos_tbProdutos]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As riControl_dbDataSet.tbPedidos_tbProdutosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As riControl_dbDataSet.tbPedidos_tbProdutosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As riControl_dbDataSet.tbPedidos_tbProdutosDataTable = New riControl_dbDataSet.tbPedidos_tbProdutosDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As riControl_dbDataSet.tbPedidos_tbProdutosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As riControl_dbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbPedidos_tbProdutos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_tbPedidos_id_pedido As Long, ByVal Original_tbProdutos_id_prod As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_tbPedidos_id_pedido,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_tbProdutos_id_prod,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal tbPedidos_id_pedido As Long, ByVal tbProdutos_id_prod As Long) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(tbPedidos_id_pedido,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(tbProdutos_id_prod,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal tbPedidos_id_pedido As Long, ByVal tbProdutos_id_prod As Long, ByVal Original_tbPedidos_id_pedido As Long, ByVal Original_tbProdutos_id_prod As Long) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(tbPedidos_id_pedido,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(tbProdutos_id_prod,Long)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_tbPedidos_id_pedido,Long)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_tbProdutos_id_prod,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_tbPedidos_id_pedido As Long, ByVal Original_tbProdutos_id_prod As Long) As Integer
            Return Me.Update(Original_tbPedidos_id_pedido, Original_tbProdutos_id_prod, Original_tbPedidos_id_pedido, Original_tbProdutos_id_prod)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbProdutosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbProdutos"
            tableMapping.ColumnMappings.Add("id_prod", "id_prod")
            tableMapping.ColumnMappings.Add("tbCategoriaProduto_id_catProd", "tbCategoriaProduto_id_catProd")
            tableMapping.ColumnMappings.Add("nome_prod", "nome_prod")
            tableMapping.ColumnMappings.Add("descricao_prod", "descricao_prod")
            tableMapping.ColumnMappings.Add("custo_prod", "custo_prod")
            tableMapping.ColumnMappings.Add("valorvenda_prod", "valorvenda_prod")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[tbProdutos] WHERE (([id_prod] = @Orig"& _ 
                "inal_id_prod) AND ([tbCategoriaProduto_id_catProd] = @Original_tbCategoriaProdut"& _ 
                "o_id_catProd) AND ([nome_prod] = @Original_nome_prod) AND ((@IsNull_descricao_pr"& _ 
                "od = 1 AND [descricao_prod] IS NULL) OR ([descricao_prod] = @Original_descricao_"& _ 
                "prod)) AND ((@IsNull_custo_prod = 1 AND [custo_prod] IS NULL) OR ([custo_prod] ="& _ 
                " @Original_custo_prod)) AND ([valorvenda_prod] = @Original_valorvenda_prod))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_prod"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbCategoriaProduto_id_catProd"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbCategoriaProduto_id_catProd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_prod"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_descricao_prod"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "descricao_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_descricao_prod"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "descricao_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_custo_prod"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "custo_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_custo_prod"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "custo_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_valorvenda_prod"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "valorvenda_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[tbProdutos] ([id_prod], [tbCategoriaP"& _ 
                "roduto_id_catProd], [nome_prod], [descricao_prod], [custo_prod], [valorvenda_pro"& _ 
                "d]) VALUES (@id_prod, @tbCategoriaProduto_id_catProd, @nome_prod, @descricao_pro"& _ 
                "d, @custo_prod, @valorvenda_prod)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_prod"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_prod"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbCategoriaProduto_id_catProd"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbCategoriaProduto_id_catProd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_prod"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_prod"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@descricao_prod"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "descricao_prod"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@custo_prod"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "custo_prod"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@valorvenda_prod"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "valorvenda_prod"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[tbProdutos] SET [id_prod] = @id_prod, [tbC"& _ 
                "ategoriaProduto_id_catProd] = @tbCategoriaProduto_id_catProd, [nome_prod] = @nom"& _ 
                "e_prod, [descricao_prod] = @descricao_prod, [custo_prod] = @custo_prod, [valorve"& _ 
                "nda_prod] = @valorvenda_prod WHERE (([id_prod] = @Original_id_prod) AND ([tbCate"& _ 
                "goriaProduto_id_catProd] = @Original_tbCategoriaProduto_id_catProd) AND ([nome_p"& _ 
                "rod] = @Original_nome_prod) AND ((@IsNull_descricao_prod = 1 AND [descricao_prod"& _ 
                "] IS NULL) OR ([descricao_prod] = @Original_descricao_prod)) AND ((@IsNull_custo"& _ 
                "_prod = 1 AND [custo_prod] IS NULL) OR ([custo_prod] = @Original_custo_prod)) AN"& _ 
                "D ([valorvenda_prod] = @Original_valorvenda_prod))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_prod"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_prod"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@tbCategoriaProduto_id_catProd"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbCategoriaProduto_id_catProd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_prod"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_prod"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@descricao_prod"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "descricao_prod"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@custo_prod"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "custo_prod"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@valorvenda_prod"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "valorvenda_prod"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_prod"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_tbCategoriaProduto_id_catProd"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "tbCategoriaProduto_id_catProd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_prod"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_descricao_prod"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "descricao_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_descricao_prod"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "descricao_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_custo_prod"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "custo_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_custo_prod"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "custo_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_valorvenda_prod"
            param.DbType = Global.System.Data.DbType.[Double]
            param.DbType = Global.System.Data.DbType.[Double]
            param.SourceColumn = "valorvenda_prod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.riControl.My.MySettings.Default.riControl_dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id_prod], [tbCategoriaProduto_id_catProd], [nome_prod], [descricao_prod],"& _ 
                " [custo_prod], [valorvenda_prod] FROM [tbProdutos]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As riControl_dbDataSet.tbProdutosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As riControl_dbDataSet.tbProdutosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As riControl_dbDataSet.tbProdutosDataTable = New riControl_dbDataSet.tbProdutosDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As riControl_dbDataSet.tbProdutosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As riControl_dbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbProdutos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_prod As Long, ByVal Original_tbCategoriaProduto_id_catProd As Long, ByVal Original_nome_prod As String, ByVal Original_descricao_prod As String, ByVal Original_custo_prod As Global.System.Nullable(Of Double), ByVal Original_valorvenda_prod As Double) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_prod,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_tbCategoriaProduto_id_catProd,Long)
            If (Original_nome_prod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_prod")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_nome_prod,String)
            End If
            If (Original_descricao_prod Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_descricao_prod,String)
            End If
            If (Original_custo_prod.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_custo_prod.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_valorvenda_prod,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_prod As Long, ByVal tbCategoriaProduto_id_catProd As Long, ByVal nome_prod As String, ByVal descricao_prod As String, ByVal custo_prod As Global.System.Nullable(Of Double), ByVal valorvenda_prod As Double) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_prod,Long)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(tbCategoriaProduto_id_catProd,Long)
            If (nome_prod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_prod")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(nome_prod,String)
            End If
            If (descricao_prod Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(descricao_prod,String)
            End If
            If (custo_prod.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(custo_prod.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(valorvenda_prod,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_prod As Long, ByVal tbCategoriaProduto_id_catProd As Long, ByVal nome_prod As String, ByVal descricao_prod As String, ByVal custo_prod As Global.System.Nullable(Of Double), ByVal valorvenda_prod As Double, ByVal Original_id_prod As Long, ByVal Original_tbCategoriaProduto_id_catProd As Long, ByVal Original_nome_prod As String, ByVal Original_descricao_prod As String, ByVal Original_custo_prod As Global.System.Nullable(Of Double), ByVal Original_valorvenda_prod As Double) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_prod,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(tbCategoriaProduto_id_catProd,Long)
            If (nome_prod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_prod")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(nome_prod,String)
            End If
            If (descricao_prod Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(descricao_prod,String)
            End If
            If (custo_prod.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(custo_prod.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(valorvenda_prod,Double)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_id_prod,Long)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_tbCategoriaProduto_id_catProd,Long)
            If (Original_nome_prod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_prod")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_nome_prod,String)
            End If
            If (Original_descricao_prod Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_descricao_prod,String)
            End If
            If (Original_custo_prod.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_custo_prod.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_valorvenda_prod,Double)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal tbCategoriaProduto_id_catProd As Long, ByVal nome_prod As String, ByVal descricao_prod As String, ByVal custo_prod As Global.System.Nullable(Of Double), ByVal valorvenda_prod As Double, ByVal Original_id_prod As Long, ByVal Original_tbCategoriaProduto_id_catProd As Long, ByVal Original_nome_prod As String, ByVal Original_descricao_prod As String, ByVal Original_custo_prod As Global.System.Nullable(Of Double), ByVal Original_valorvenda_prod As Double) As Integer
            Return Me.Update(Original_id_prod, tbCategoriaProduto_id_catProd, nome_prod, descricao_prod, custo_prod, valorvenda_prod, Original_id_prod, Original_tbCategoriaProduto_id_catProd, Original_nome_prod, Original_descricao_prod, Original_custo_prod, Original_valorvenda_prod)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbUnidadeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbUnidade"
            tableMapping.ColumnMappings.Add("id_unidade", "id_unidade")
            tableMapping.ColumnMappings.Add("nome_unidade", "nome_unidade")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[tbUnidade] WHERE (([id_unidade] = @Or"& _ 
                "iginal_id_unidade) AND ([nome_unidade] = @Original_nome_unidade))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_unidade"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_unidade"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_unidade"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_unidade"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[tbUnidade] ([id_unidade], [nome_unida"& _ 
                "de]) VALUES (@id_unidade, @nome_unidade)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_unidade"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_unidade"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_unidade"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_unidade"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[tbUnidade] SET [id_unidade] = @id_unidade,"& _ 
                " [nome_unidade] = @nome_unidade WHERE (([id_unidade] = @Original_id_unidade) AND"& _ 
                " ([nome_unidade] = @Original_nome_unidade))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id_unidade"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_unidade"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@nome_unidade"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_unidade"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_id_unidade"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "id_unidade"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_nome_unidade"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "nome_unidade"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.riControl.My.MySettings.Default.riControl_dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [id_unidade], [nome_unidade] FROM [tbUnidade]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As riControl_dbDataSet.tbUnidadeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As riControl_dbDataSet.tbUnidadeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As riControl_dbDataSet.tbUnidadeDataTable = New riControl_dbDataSet.tbUnidadeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As riControl_dbDataSet.tbUnidadeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As riControl_dbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tbUnidade")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_unidade As Long, ByVal Original_nome_unidade As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_unidade,Long)
            If (Original_nome_unidade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_unidade")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nome_unidade,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_unidade As Long, ByVal nome_unidade As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_unidade,Long)
            If (nome_unidade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_unidade")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nome_unidade,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id_unidade As Long, ByVal nome_unidade As String, ByVal Original_id_unidade As Long, ByVal Original_nome_unidade As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id_unidade,Long)
            If (nome_unidade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nome_unidade")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nome_unidade,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_id_unidade,Long)
            If (Original_nome_unidade Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_nome_unidade")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_nome_unidade,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal nome_unidade As String, ByVal Original_id_unidade As Long, ByVal Original_nome_unidade As String) As Integer
            Return Me.Update(Original_id_unidade, nome_unidade, Original_id_unidade, Original_nome_unidade)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _tbCategoriaProdutoTableAdapter As tbCategoriaProdutoTableAdapter
        
        Private _tbClientesTableAdapter As tbClientesTableAdapter
        
        Private _tbFormaPagamentoTableAdapter As tbFormaPagamentoTableAdapter
        
        Private _tbFornecedoresTableAdapter As tbFornecedoresTableAdapter
        
        Private _tbFornecedores_tbPedidosTableAdapter As tbFornecedores_tbPedidosTableAdapter
        
        Private _tbPedidosTableAdapter As tbPedidosTableAdapter
        
        Private _tbPedidos_tbProdutosTableAdapter As tbPedidos_tbProdutosTableAdapter
        
        Private _tbProdutosTableAdapter As tbProdutosTableAdapter
        
        Private _tbUnidadeTableAdapter As tbUnidadeTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbCategoriaProdutoTableAdapter() As tbCategoriaProdutoTableAdapter
            Get
                Return Me._tbCategoriaProdutoTableAdapter
            End Get
            Set
                Me._tbCategoriaProdutoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbClientesTableAdapter() As tbClientesTableAdapter
            Get
                Return Me._tbClientesTableAdapter
            End Get
            Set
                Me._tbClientesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbFormaPagamentoTableAdapter() As tbFormaPagamentoTableAdapter
            Get
                Return Me._tbFormaPagamentoTableAdapter
            End Get
            Set
                Me._tbFormaPagamentoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbFornecedoresTableAdapter() As tbFornecedoresTableAdapter
            Get
                Return Me._tbFornecedoresTableAdapter
            End Get
            Set
                Me._tbFornecedoresTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbFornecedores_tbPedidosTableAdapter() As tbFornecedores_tbPedidosTableAdapter
            Get
                Return Me._tbFornecedores_tbPedidosTableAdapter
            End Get
            Set
                Me._tbFornecedores_tbPedidosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbPedidosTableAdapter() As tbPedidosTableAdapter
            Get
                Return Me._tbPedidosTableAdapter
            End Get
            Set
                Me._tbPedidosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbPedidos_tbProdutosTableAdapter() As tbPedidos_tbProdutosTableAdapter
            Get
                Return Me._tbPedidos_tbProdutosTableAdapter
            End Get
            Set
                Me._tbPedidos_tbProdutosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbProdutosTableAdapter() As tbProdutosTableAdapter
            Get
                Return Me._tbProdutosTableAdapter
            End Get
            Set
                Me._tbProdutosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tbUnidadeTableAdapter() As tbUnidadeTableAdapter
            Get
                Return Me._tbUnidadeTableAdapter
            End Get
            Set
                Me._tbUnidadeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._tbCategoriaProdutoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbCategoriaProdutoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbCategoriaProdutoTableAdapter.Connection
                End If
                If ((Not (Me._tbClientesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbClientesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbClientesTableAdapter.Connection
                End If
                If ((Not (Me._tbFormaPagamentoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbFormaPagamentoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbFormaPagamentoTableAdapter.Connection
                End If
                If ((Not (Me._tbFornecedoresTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbFornecedoresTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbFornecedoresTableAdapter.Connection
                End If
                If ((Not (Me._tbFornecedores_tbPedidosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbFornecedores_tbPedidosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbFornecedores_tbPedidosTableAdapter.Connection
                End If
                If ((Not (Me._tbPedidosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbPedidosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbPedidosTableAdapter.Connection
                End If
                If ((Not (Me._tbPedidos_tbProdutosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbPedidos_tbProdutosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbPedidos_tbProdutosTableAdapter.Connection
                End If
                If ((Not (Me._tbProdutosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbProdutosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbProdutosTableAdapter.Connection
                End If
                If ((Not (Me._tbUnidadeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tbUnidadeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tbUnidadeTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._tbCategoriaProdutoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tbClientesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tbFormaPagamentoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tbFornecedoresTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tbFornecedores_tbPedidosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tbPedidosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tbPedidos_tbProdutosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tbProdutosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tbUnidadeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As riControl_dbDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tbCategoriaProdutoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbCategoriaProduto.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbCategoriaProdutoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tbClientesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbClientes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbClientesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tbFormaPagamentoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbFormaPagamento.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbFormaPagamentoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tbUnidadeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbUnidade.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbUnidadeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tbFornecedoresTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbFornecedores.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbFornecedoresTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tbPedidosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbPedidos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbPedidosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tbProdutosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbProdutos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbProdutosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tbFornecedores_tbPedidosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbFornecedores_tbPedidos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbFornecedores_tbPedidosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tbPedidos_tbProdutosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tbPedidos_tbProdutos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tbPedidos_tbProdutosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As riControl_dbDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tbCategoriaProdutoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbCategoriaProduto.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbCategoriaProdutoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tbClientesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbClientes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbClientesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tbFormaPagamentoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbFormaPagamento.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbFormaPagamentoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tbUnidadeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbUnidade.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbUnidadeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tbFornecedoresTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbFornecedores.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbFornecedoresTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tbPedidosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbPedidos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbPedidosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tbProdutosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbProdutos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbProdutosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tbFornecedores_tbPedidosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbFornecedores_tbPedidos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbFornecedores_tbPedidosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tbPedidos_tbProdutosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tbPedidos_tbProdutos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tbPedidos_tbProdutosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As riControl_dbDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tbPedidos_tbProdutosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbPedidos_tbProdutos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbPedidos_tbProdutosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tbFornecedores_tbPedidosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbFornecedores_tbPedidos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbFornecedores_tbPedidosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tbProdutosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbProdutos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbProdutosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tbPedidosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbPedidos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbPedidosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tbFornecedoresTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbFornecedores.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbFornecedoresTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tbUnidadeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbUnidade.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbUnidadeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tbFormaPagamentoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbFormaPagamento.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbFormaPagamentoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tbClientesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbClientes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbClientesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tbCategoriaProdutoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tbCategoriaProduto.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tbCategoriaProdutoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As riControl_dbDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._tbCategoriaProdutoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbCategoriaProdutoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tbClientesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbClientesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tbFormaPagamentoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbFormaPagamentoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tbFornecedoresTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbFornecedoresTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tbFornecedores_tbPedidosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbFornecedores_tbPedidosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tbPedidosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbPedidosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tbPedidos_tbProdutosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbPedidos_tbProdutosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tbProdutosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbProdutosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tbUnidadeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tbUnidadeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._tbCategoriaProdutoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbCategoriaProdutoTableAdapter, Me._tbCategoriaProdutoTableAdapter.Connection)
                    Me._tbCategoriaProdutoTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbCategoriaProdutoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._tbCategoriaProdutoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbCategoriaProdutoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbCategoriaProdutoTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tbClientesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbClientesTableAdapter, Me._tbClientesTableAdapter.Connection)
                    Me._tbClientesTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbClientesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._tbClientesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbClientesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbClientesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tbFormaPagamentoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbFormaPagamentoTableAdapter, Me._tbFormaPagamentoTableAdapter.Connection)
                    Me._tbFormaPagamentoTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbFormaPagamentoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._tbFormaPagamentoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbFormaPagamentoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbFormaPagamentoTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tbFornecedoresTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbFornecedoresTableAdapter, Me._tbFornecedoresTableAdapter.Connection)
                    Me._tbFornecedoresTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbFornecedoresTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._tbFornecedoresTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbFornecedoresTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbFornecedoresTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tbFornecedores_tbPedidosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbFornecedores_tbPedidosTableAdapter, Me._tbFornecedores_tbPedidosTableAdapter.Connection)
                    Me._tbFornecedores_tbPedidosTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbFornecedores_tbPedidosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._tbFornecedores_tbPedidosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbFornecedores_tbPedidosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbFornecedores_tbPedidosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tbPedidosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbPedidosTableAdapter, Me._tbPedidosTableAdapter.Connection)
                    Me._tbPedidosTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbPedidosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._tbPedidosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbPedidosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbPedidosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tbPedidos_tbProdutosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbPedidos_tbProdutosTableAdapter, Me._tbPedidos_tbProdutosTableAdapter.Connection)
                    Me._tbPedidos_tbProdutosTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbPedidos_tbProdutosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._tbPedidos_tbProdutosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbPedidos_tbProdutosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbPedidos_tbProdutosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tbProdutosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbProdutosTableAdapter, Me._tbProdutosTableAdapter.Connection)
                    Me._tbProdutosTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbProdutosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._tbProdutosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbProdutosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbProdutosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tbUnidadeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tbUnidadeTableAdapter, Me._tbUnidadeTableAdapter.Connection)
                    Me._tbUnidadeTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbUnidadeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._tbUnidadeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tbUnidadeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tbUnidadeTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._tbCategoriaProdutoTableAdapter) Is Nothing) Then
                    Me._tbCategoriaProdutoTableAdapter.Connection = CType(revertConnections(Me._tbCategoriaProdutoTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbCategoriaProdutoTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tbClientesTableAdapter) Is Nothing) Then
                    Me._tbClientesTableAdapter.Connection = CType(revertConnections(Me._tbClientesTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbClientesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tbFormaPagamentoTableAdapter) Is Nothing) Then
                    Me._tbFormaPagamentoTableAdapter.Connection = CType(revertConnections(Me._tbFormaPagamentoTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbFormaPagamentoTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tbFornecedoresTableAdapter) Is Nothing) Then
                    Me._tbFornecedoresTableAdapter.Connection = CType(revertConnections(Me._tbFornecedoresTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbFornecedoresTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tbFornecedores_tbPedidosTableAdapter) Is Nothing) Then
                    Me._tbFornecedores_tbPedidosTableAdapter.Connection = CType(revertConnections(Me._tbFornecedores_tbPedidosTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbFornecedores_tbPedidosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tbPedidosTableAdapter) Is Nothing) Then
                    Me._tbPedidosTableAdapter.Connection = CType(revertConnections(Me._tbPedidosTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbPedidosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tbPedidos_tbProdutosTableAdapter) Is Nothing) Then
                    Me._tbPedidos_tbProdutosTableAdapter.Connection = CType(revertConnections(Me._tbPedidos_tbProdutosTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbPedidos_tbProdutosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tbProdutosTableAdapter) Is Nothing) Then
                    Me._tbProdutosTableAdapter.Connection = CType(revertConnections(Me._tbProdutosTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbProdutosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tbUnidadeTableAdapter) Is Nothing) Then
                    Me._tbUnidadeTableAdapter.Connection = CType(revertConnections(Me._tbUnidadeTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._tbUnidadeTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
